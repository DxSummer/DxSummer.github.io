{"title":"C控制语句：分支和跳转","date":"2020-06-06T02:30:50.000Z","date_formatted":{"ll":"2020年6月6日","L":"2020/06/06","MM-DD":"06-06"},"link":"posts/3e5d0fae","comments":true,"tags":["分支和跳转"],"categories":["C语言"],"updated":"2020-06-06T07:40:23.124Z","content":"<p>本章介绍以下内容：</p>\n<p>关键字：<code>if</code>、<code>else</code>、<code>switch</code>、<code>continue</code>、<code>break</code>、<code>case</code>、<code>default</code>、<code>goto</code></p>\n<p>运算符：<code>&amp;&amp;</code>、<code>||</code>、<code>?</code>、<code>:</code></p>\n<p>函数：<code>getchar()</code>、<code>putchar()</code>、<code>ctype.h</code>系列</p>\n<p>如何使用<code>if</code>和<code>if else</code>语句，如何嵌套它们</p>\n<p>在更复杂的测试表达式中用逻辑运算符组合关系表达式</p>\n<p>C的条件运算符</p>\n<p><strong>switch语句</strong></p>\n<p><strong>break</strong>、<strong>continue</strong>和<strong>goto语句</strong></p>\n<p>使用C的字符I/O函数：<code>getchar()</code>和<code>putchar()</code></p>\n<p><code>ctype.h</code>头文件提供的字符分析函数系列</p>\n<p>随着越来越熟悉C，可以尝试用C程序解决一些更复杂的问题。这时候，需要一些方法来控制和组织程序，为此C提供了一些工具。前面已经学过如何在程序中用循环重复执行任务。本章将介绍分支结构（如， <code>if</code>和<code>switch</code>），让程序根据测试条件执行相应的行为。另外，还将介绍C语言的逻辑运算符，使用逻辑运算符能在 <code>while</code> 或 <code>if</code> 的条件中测试更多关系。此外，本章还将介绍跳转语句，它将程序流转换到程序的其他部分。学完本章后，读者就可以设计按自己期望方式运行的程序。</p>\n<h2 id=\"if语句\">if语句<a href=\"#if语句\" title=\"if语句\"></a></h2><p>我们从一个有<code>if</code>语句的简单示例开始学习，请看程序清单7.1。该程序读取一列数据，每个数据都表示每日的最低温度（℃），然后打印统计的总天数和最低温度在0℃以下的天数占总天数的百分比。程序中的循环通过<code>scanf</code>()读入温度值。<code>while</code>循环每迭代一次，就递增计数器增加天数，其中的<code>if</code>语句负责判断<strong>0℃</strong>以下的温度并单独统计相应的天数。</p>\n<p>程序清单7.1 colddays.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// colddays.c -- 找出0℃以下的天数占总天数的百分比</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> FREEZING=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> temperature;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cold_days=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> all_days=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Enter the list of daily low temperatures.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Use Celsius, and enter q to quit.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>,&amp;temperature)==<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        all_days++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temperature&lt;FREEZING)</span><br><span class=\"line\">        cold_days++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (all_days!=<span class=\"number\">0</span>)</span><br><span class=\"line\">   \t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d days total: %.1f%% were below freezing.\\n\"</span>,</span><br><span class=\"line\">  \t\tall_days,<span class=\"number\">100.0</span>*(<span class=\"keyword\">float</span>)cold_days/all_days);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (all_days==<span class=\"number\">0</span>)</span><br><span class=\"line\"> \t   <span class=\"built_in\">printf</span>(<span class=\"string\">\"No data entered!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是该程序的输出示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter the <span class=\"built_in\">list</span> of daily low temperatures.</span><br><span class=\"line\">Use Celsius, <span class=\"keyword\">and</span> enter q to quit.</span><br><span class=\"line\"><span class=\"number\">12</span> <span class=\"number\">5</span> <span class=\"number\">-2.5</span> <span class=\"number\">0</span> <span class=\"number\">6</span> <span class=\"number\">8</span> <span class=\"number\">-3</span> <span class=\"number\">-10</span> <span class=\"number\">5</span> <span class=\"number\">10</span> q</span><br><span class=\"line\"><span class=\"number\">10</span> days total: <span class=\"number\">30.0</span>% were below freezing.</span><br></pre></td></tr></table></figure><p><code>while</code>循环的测试条件利用<code>scanf()</code>的返回值来结束循环，因为<code>scanf()</code>在读到非数字字符时会返回<code>0</code>。<code>temperature</code>的类型是<code>float</code>而不是<code>int</code>，这样程序既可以接受-2.5这样的值，也可以接受8这样的值。</p>\n<p><code>while</code>循环中的新语句如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(temperature&lt;FREEZING)</span><br><span class=\"line\">cold_days++;</span><br></pre></td></tr></table></figure><p><code>if</code> 语句指示计算机，如果刚读取的值（remperature）小于 0，就把 <code>cold_days</code> 递增 1；如果temperature不小于0，就跳过<code>cold_days++;</code>语句，<code>while</code>循环继续读取下一个温度值。</p>\n<p>接着，该程序又使用了两次if语句控制程序的输出。如果有数据，就打印结果；如果没有数据，就打印一条消息（稍后将介绍一种更好的方法来处理这种情况）。</p>\n<p>为避免整数除法，该程序示例把计算后的百分比强制转换为 <code>float</code>类型。其实，也不必使用强制类型转换，因为在表达式<code>100.0 * cold_days / all_days</code>中，将首先对表达式<code>100.0 * cold_days</code>求值，由于C的自动转换类型规则，乘积会被强制转换成浮点数。但是，使用强制类型转换可以明确表达转换类型的意图，保护程序免受不同版本编译器的影响。<code>if</code>语句被称为<strong>分支语句</strong>（branching statement）或<strong>选择语句</strong>（selection statement），因为它相当于一个交叉点，程序要在两条分支中选择一条执行。if语句的通用形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(expression)</span><br><span class=\"line\">statement</span><br></pre></td></tr></table></figure><p>如果对<code>expression</code>求值为真（非0），则执行<code>statement</code>；否则，跳过<code>statement</code>。与<code>while</code>循环一样，<code>statement</code>可以是一条简单语句或复合语句。<code>if</code>语句的结构和<code>while</code>语句很相似，它们的主要区别是：如果满足条件可执行的话，if语句只能测试和执行一次，而while语句可以测试和执行多次。</p>\n<p>通常，<code>expression</code> 是<strong>关系表达式</strong>，即比较两个量的大小（如，表达式 x &gt; y 或 c == 6）。如果<code>expression</code>为真（即x大于y，或c == 6），则执行<code>statement</code>。否则，忽略<code>statement</code>。概括地说，可以使用任意表达式，表达式的值为0则为假。</p>\n<p><code>statement</code>部分可以是一条简单语句，如本例所示，或者是一条用花括号括起来的复合语句（或块）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (score &gt; big)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Jackpot!\\n\"</span>);　<span class=\"comment\">// 简单语句</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (joe &gt; ron)</span><br><span class=\"line\">&#123;　　　　　　　　　　　　　 <span class=\"comment\">// 复合语句</span></span><br><span class=\"line\">    joecash++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"You lose, Ron.\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意，即使if语句由复合语句构成，整个if语句仍被视为一条语句。</p>\n<h2 id=\"if-else语句\">if else语句<a href=\"#if-else语句\" title=\"if else语句\"></a></h2><p>简单形式的if语句可以让程序选择执行一条语句，或者跳过这条语句。C还提供了if else形式，可以在两条语句之间作选择。我们用if else形式修正程序清单7.1中的程序段。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (all_days != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d days total: %.1f%% were below freezing.\\n\"</span>,</span><br><span class=\"line\">\tall_days, <span class=\"number\">100.0</span> * (<span class=\"keyword\">float</span>) cold_days / all_days);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (all_days == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"No data entered!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>如果程序发现<code>all_days</code>不等于0，那么它应该知道另一种情况一定是<code>all_days</code>等于0。用<code>if else</code>形式只需测试一次。重写上面的程序段如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (all_days!= <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d days total: %.1f%% were below freezing.\\n\"</span>,</span><br><span class=\"line\">    all_days, <span class=\"number\">100.0</span> * (<span class=\"keyword\">float</span>) cold_days / all_days);</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"No data entered!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>如果if语句的测试表达式为真，就打印温度数据；如果为假，就打印警告消息。</p>\n<p>注意，<code>if else</code>语句的通用形式是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> ( expression )</span><br><span class=\"line\">statement1</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">statement2</span><br></pre></td></tr></table></figure><p>如果<code>expression</code>为真（非0），则执行<code>statement1</code>；如果<code>expression</code>为假或0，则执行else后面的<code>statement2</code>。<code>statement1</code>和<code>statement2</code>可以是一条简单语句或复合语句。C并不要求一定要缩进，但这是标准风格。缩进让根据测试条件的求值结果来判断执行哪部分语句一目了然。</p>\n<p>如果要在<code>if</code>和<code>else</code>之间执行多条语句，必须用花括号把这些语句括起来成为一个块。下面的代码结构违反了C语法，因为在if和else之间只允许有一条语句（简单语句或复合语句）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Incrementing x:\\n\"</span>);</span><br><span class=\"line\">x++;</span><br><span class=\"line\"><span class=\"keyword\">else</span>　　　<span class=\"comment\">// 将产生一个错误</span></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"x &lt;= 0 \\n\"</span>);</span><br></pre></td></tr></table></figure><p>编译器把<code>printf()</code>语句视为<code>if</code>语句的一部分，而把<code>x++;</code>看作一条单独的语句，它不是<code>if</code>语句的一部分。然后，编译器发现<code>else</code>并没有所属的<code>if</code>，这是错误的。上面的代码应该这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Incrementing x:\\n\"</span>);</span><br><span class=\"line\">    x++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"x &lt;= 0 \\n\"</span>);</span><br></pre></td></tr></table></figure><p><code>if</code>语句用于选择是否执行一个行为，而<code>else if</code>语句用于在两个行为之间选择。图7.1比较了这两种语句。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/inside/if语句和ifelse语句.png\" class=\"φcy\"></p>\n<h3 id=\"另一个示例：介绍getchar和putchar\">另一个示例：介绍getchar()和putchar()<a href=\"#另一个示例：介绍getchar和putchar\" title=\"另一个示例：介绍getchar()和putchar()\"></a></h3><p>到目前为止，学过的大多数程序示例都要求输入数值。接下来，我们看看输入字符的示例。相信读者已经熟悉了如何用 <code>scanf()</code>和 <code>printf()</code>根据<code>%c</code> 转换说明读写字符，我们马上要讲解的示例中要用到一对字符输入/输出函数：<code>getchar()</code>和<code>putchar()</code>。</p>\n<p><code>getchar()</code>函数不带任何参数，它从输入队列中返回下一个字符。例如，下面的语句读取下一个字符输入，并把该字符的值赋给变量ch：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch = getchar();</span><br></pre></td></tr></table></figure><p>该语句与下面的语句效果相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>, &amp;ch);</span><br></pre></td></tr></table></figure><p><code>putchar()</code>函数打印它的参数。例如，下面的语句把之前赋给ch的值作为字符打印出来：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">putchar</span>(ch);</span><br></pre></td></tr></table></figure><p>该语句与下面的语句效果相同：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%c\"</span>, ch);</span><br></pre></td></tr></table></figure><p>由于这些函数只处理字符，所以它们比更通用的<code>scanf()</code>和<code>printf()</code>函数更快、更简洁。而且，注意 <code>getchar()</code>和 <code>putchar()</code>不需要转换说明，因为它们只处理字符。这两个函数通常定义在 <code>stdio.h</code>头文件中（而且，它们通常是预处理宏，而不是真正的函数，第16章会讨论类似函数的宏）。</p>\n<p>接下来，我们编写一个程序来说明这两个函数是如何工作的。该程序把一行输入重新打印出来，但是每个非空格都被替换成原字符在ASCII序列中的下一个字符，空格不变。这一过程可描述为“如果字符是空白，原样打印；否则，打印原字符在ASCII序列中的下一个字符”。</p>\n<p>C代码看上去和上面的描述很相似，请看程序清单7.2。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">7.2</span> cypher1.c程序</span><br><span class=\"line\"><span class=\"comment\">// cypher1.c -- 更改输入，空格不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SPACE <span class=\"meta-string\">' '</span>　　　　　　　 <span class=\"comment\">// SPACE表示单引号-空格-单引号</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    ch = getchar();　　　　　　 <span class=\"comment\">// 读取一个字符</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch != <span class=\"string\">'\\n'</span>)　　　　 <span class=\"comment\">// 当一行未结束时</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ch == SPACE)　　　 <span class=\"comment\">// 留下空格</span></span><br><span class=\"line\">     \t   <span class=\"built_in\">putchar</span>(ch);　　　 <span class=\"comment\">// 该字符不变</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">     \t   <span class=\"built_in\">putchar</span>(ch + <span class=\"number\">1</span>);　 <span class=\"comment\">// 改变其他字符</span></span><br><span class=\"line\">        ch = getchar();　　　　<span class=\"comment\">// 获取下一个字符</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);　　　　　　　　<span class=\"comment\">// 打印换行符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>（如果编译器警告因转换可能导致数据丢失，不用担心。第8章在讲到EOF时再解释。）</p>\n<p>下面是该程序的输入示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CALL ME HAL.</span><br><span class=\"line\">DBMM NF IBM/</span><br></pre></td></tr></table></figure><p>把程序清单7.1中的循环和该例中的循环作比较。前者使用<code>scanf()</code>返回的状态值判断是否结束循环，而后者使用输入项的值来判断是否结束循环。这使得两程序所用的循环结构略有不同：程序清单7.1中在循环前面有一条“读取语句”，程序清单7.2中在每次迭代的末尾有一条“读取语句”。不过，C的语法比较灵活，读者也可以模仿程序清单7.1，把读取和测试合并成一个表达式。也就是说，可以把这种形式的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch = getchar();　　　 <span class=\"comment\">/* 读取一个字符 */</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (ch != <span class=\"string\">'\\n'</span>)　　<span class=\"comment\">/* 当一行未结束时 */</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ...　　　　　　　<span class=\"comment\">/* 处理字符 */</span></span><br><span class=\"line\">    ch = getchar();　 <span class=\"comment\">/* 获取下一个字符 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>替换成下面形式的循环：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t...　　　　　　　<span class=\"comment\">/* 处理字符 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>关键的一行代码是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure><p>这体现了C特有的编程风格——把两个行为合并成一个表达式。C对代码的格式要求宽松，这样写让其中的每个行为更加清晰：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (</span><br><span class=\"line\">(ch = getchar())　　　　　　 <span class=\"comment\">// 给ch赋一个值</span></span><br><span class=\"line\">!= <span class=\"string\">'\\n'</span>)　 <span class=\"comment\">// 把ch和\\n作比较</span></span><br></pre></td></tr></table></figure><p>以上执行的行为是赋值给<code>ch</code>和把<code>ch</code>的值与换行符作比较。表达式<code>ch = getchar()</code>两侧的圆括号使之成为<code>!=</code>运算符的左侧运算对象。要对该表达式求值，必须先调用<code>getchar()</code>函数，然后把该函数的返回值赋给 <code>ch</code>。因为赋值表达式的值是赋值运算符左侧运算对象的值，所以 <code>ch = getchar()</code>的值就是 <code>ch</code> 的新值，因此，读取<code>ch</code>的值后，测试条件相当于是<code>ch != &#39;\\n&#39;</code>（即，ch不是换行符）。</p>\n<p>这种独特的写法在C编程中很常见，应该多熟悉它。还要记住合理使用圆括号组合子表达式。上面例子中的圆括号都必不可少。假设省略<code>ch = getchar()</code>两侧的圆括号：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (ch = getchar() != <span class=\"string\">'\\n'</span>)</span><br></pre></td></tr></table></figure><p><code>!=</code>运算符的优先级比<code>=</code>高，所以先对表达式<code>getchar() != &#39;\\n&#39;</code>求值。由于这是关系表达式，所以其值不是1就是0（真或假）。然后，把该值赋给<code>ch</code>。省略圆括号意味着赋给<code>ch</code>的值是0或1，而不是 <code>getchar()</code>的返回值。这不是我们的初衷。</p>\n<p>下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">putchar</span>(ch + <span class=\"number\">1</span>); <span class=\"comment\">/* 改变其他字符 */</span></span><br></pre></td></tr></table></figure><p>再次演示了字符实际上是作为整数储存的。为方便计算，表达式<code>ch + 1</code>中的<code>ch</code>被转换成<code>int</code>类型，然后<code>int</code>类型的计算结果被传递给接受一个<code>int</code>类型参数的<code>putchar()</code>，该函数只根据最后一个字节确定显示哪个字符。</p>\n<h3 id=\"ctypeh系列的字符函数\">ctype.h系列的字符函数<a href=\"#ctypeh系列的字符函数\" title=\"ctype.h系列的字符函数\"></a></h3><p>注意到程序清单7.2的输出中，最后输入的点号（<code>.</code>）被转换成斜杠（<code>/</code>），这是因为斜杠字符对应的ASCII码比点号的 ASCII 码多 1。如果程序只转换字母，保留所有的非字母字符（不只是空格）会更好。本章稍后讨论的逻辑运算符可用来测试字符是否不是空格、不是逗号等，但是列出所有的可能性太繁琐。C 有一系列<strong>专门处理字符的函数</strong>，<code>ctype.h</code>头文件包含了这些函数的原型。这些函数接受一个字符作为参数，如果该字符属于某特殊的类别，就返回一个非零值（真）；否则，返回0（假）。例如，如果<code>isalpha()</code><strong>函数的参数是一个字母，则返回一个非零值</strong>。程序清单7.3在程序清单7.2的基础上使用了这个函数，还使用了刚才精简后的循环。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">7.3</span> cypher2.c程序</span><br><span class=\"line\"><span class=\"comment\">// cypher2.c -- 替换输入的字母，非字母字符保持不变</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;ctype.h&gt;　　　　　　　// 包含isalpha()的函数原型</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((ch = getchar()) != <span class=\"string\">'\\n'</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isalpha</span>(ch))　　　 <span class=\"comment\">// 如果是一个字符，</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(ch + <span class=\"number\">1</span>);　 <span class=\"comment\">// 显示该字符的下一个字符</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>　　　　　　　　　　<span class=\"comment\">// 否则，</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(ch);　　　 <span class=\"comment\">// 原样显示</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(ch);　　　　　　　 <span class=\"comment\">// 显示换行符</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是该程序的一个输出示例，注意大小写字母都被替换了，除了空格和标点符号：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Look! It<span class=\"number\">'</span>s a programmer!</span><br><span class=\"line\">Mppl! Ju't b qsphsbnnfs!</span><br></pre></td></tr></table></figure><p>表7.1和表7.2列出了<code>ctype.h</code>头文件中的一些函数。有些函数涉及本地化，指的是为适应特定区域的使用习惯修改或扩展 C 基本用法的工具（例如，许多国家在书写小数点时，用逗号代替点号，于是特殊的本地化可以指定C编译器使用逗号以相同的方式输出浮点数，这样123.45可以显示为123,45）。注意，字符映射函数不会修改原始的参数，这些函数只会返回已修改的值。也就是说，下面的语句不改变ch的值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tolower</span>(ch); <span class=\"comment\">// 不影响ch的值</span></span><br></pre></td></tr></table></figure><p>这样做才会改变ch的值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch = <span class=\"built_in\">tolower</span>(ch); <span class=\"comment\">// 把ch转换成小写字母</span></span><br></pre></td></tr></table></figure><blockquote>\n<p>ctype.h头文件中的字符测试函数</p>\n</blockquote>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/inside/ctype.h头文件中的字符测试函数.png\" class=\"φcy\"></p>\n<blockquote>\n<p>ctype.h头文件中的字符映射函数</p>\n</blockquote>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/inside/ctype.h头文件中的字符映射函数.png\" class=\"φcy\"></p>\n<h3 id=\"多重选择else-if\">多重选择else if<a href=\"#多重选择else-if\" title=\"多重选择else if\"></a></h3><p>现实生活中我们经常有多种选择。在程序中也可以用<code>else if</code>扩展<code>if else</code>结构模拟这种情况。来看一个特殊的例子。电力公司通常根据客户的总用电量来决定电费。下面是某电力公司的电费清单，单位是千瓦时（kWh）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">首 <span class=\"number\">360</span>kWh:　　　　 $<span class=\"number\">0.13230</span>/kWh</span><br><span class=\"line\">续 <span class=\"number\">108</span>kWh:　　　　 $<span class=\"number\">0.15040</span>/kWh</span><br><span class=\"line\">续 <span class=\"number\">252</span>kWh:　　　　 $<span class=\"number\">0.30025</span>/kWh</span><br><span class=\"line\">超过 <span class=\"number\">720</span>kWh:　　　 $<span class=\"number\">0.34025</span>/kWh</span><br></pre></td></tr></table></figure><p>如果对用电管理感兴趣，可以编写一个计算电费的程序。程序清单7.4是完成这一任务的第1步。</p>\n<p>程序清单7.4 electric.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// electric.c -- 计算电费</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE1　 0.13230　　　　　　　<span class=\"comment\">// 首次使用 360 kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE2　 0.15040　　　　　　　<span class=\"comment\">// 接着再使用 108 kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE3　 0.30025　　　　　　　<span class=\"comment\">// 接着再使用 252 kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> RATE4　 0.34025　　　　　　　<span class=\"comment\">// 使用超过 720kwh 的费率</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BREAK1　360.0　　　　　　　　<span class=\"comment\">// 费率的第1个分界点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BREAK2　468.0　　　　　　　　<span class=\"comment\">// 费率的第2个分界点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BREAK3　720.0　　　　　　　　<span class=\"comment\">// 费率的第3个分界点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BASE1　(RATE1 * BREAK1)</span></span><br><span class=\"line\"><span class=\"comment\">// 使用360kwh的费用</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BASE2 (BASE1 + (RATE2 * (BREAK2 - BREAK1)))</span></span><br><span class=\"line\"><span class=\"comment\">// 使用468kwh的费用</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BASE3　(BASE1 + BASE2 + (RATE3 *(BREAK3 - BREAK2)))</span></span><br><span class=\"line\"><span class=\"comment\">// 使用720kwh的费用</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> kwh;　　　　　　　　　　 <span class=\"comment\">// 使用的千瓦时</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> bill;　　　　　　　　　　<span class=\"comment\">// 电费</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please enter the kwh used.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>, &amp;kwh);　　　　　　 <span class=\"comment\">// %lf对应double类型</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (kwh &lt;= BREAK1)</span><br><span class=\"line\">\t\tbill = RATE1 * kwh;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (kwh &lt;= BREAK2)　　　　 <span class=\"comment\">// 360～468 kwh</span></span><br><span class=\"line\">\t\tbill = BASE1 + (RATE2 * (kwh - BREAK1));</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (kwh &lt;= BREAK3)　　　　 <span class=\"comment\">// 468～720 kwh</span></span><br><span class=\"line\">\t\tbill = BASE2 + (RATE3 * (kwh - BREAK2));</span><br><span class=\"line\">    <span class=\"keyword\">else</span>　　　　　　　　　　　　　　<span class=\"comment\">// 超过 720 kwh</span></span><br><span class=\"line\">\t\tbill = BASE3 + (RATE4 * (kwh - BREAK3));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The charge for %.1f kwh is $%1.2f.\\n\"</span>, kwh, bill);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Please enter the kwh used.</span><br><span class=\"line\"><span class=\"number\">580</span></span><br><span class=\"line\">The charge <span class=\"keyword\">for</span> <span class=\"number\">580.0</span> kwh is $<span class=\"number\">97.50</span>.</span><br></pre></td></tr></table></figure><p>程序清单 7.4 用符号常量表示不同的费率和费率分界点，以便把常量统一放在一处。这样，电力公司在更改费率以及费率分界点时，更新数据非常方便。<code>BASE1</code>和<code>BASE2</code>根据费率和费率分界点来表示。一旦费率或分界点发生了变化，它们也会自动更新。预处理器是不进行计算的。程序中出现<code>BASE1</code>的地方都会被替换成 <code>0.13230*360.0</code>。不用担心，编译器会对该表达式求值得到一个数值（47.628），以便最终的程序代码使用的是<strong>47.628</strong>而不是一个计算式。</p>\n<p>程序流简单明了。该程序根据<code>kwh</code>的值在3个公式之间选择一个。特别要注意的是，如果<code>kwh</code>大于或等于<code>360</code>，程序只会到达第1个<code>else</code>。因此，<code>else if(kwh&lt;=BREAK2)</code>这行相当于要求<code>kwh</code>在<strong>360～482</strong>之间，如程序注释所示。类似地，只有当<code>kwh</code>的值超过<code>720</code>时，才会执行最后的<code>else</code>。最后，注意<code>BASE1</code>、<code>BASE2</code>和<code>BASE3</code>分别代表<strong>360</strong>、<strong>468</strong>和<strong>720</strong>千瓦时的总费用。因此，当电量超过这些值时，只需要加上额外的费用即可。</p>\n<p>实际上，<code>else if</code> 是已学过的 <code>if else</code> 语句的变式。例如，该程序的核心部分只不过是下面代码的另一种写法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (kwh &lt;= BREAK1)</span><br><span class=\"line\">\tbill=RATE1*kwh;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (kwh &lt;= BREAK2)　　　　 <span class=\"comment\">// 360～468 kwh</span></span><br><span class=\"line\">\t\tbill = BASE1 + (RATE2 * (kwh - BREAK1));</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (kwh &lt;= BREAK3)　　 <span class=\"comment\">// 468～720 kwh</span></span><br><span class=\"line\">\t\t\tbill = BASE2 + (RATE3 * (kwh - BREAK2));</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span>　　　　　　　　　　<span class=\"comment\">// 超过720 kwh</span></span><br><span class=\"line\">\t\t\tbill = BASE3 + (RATE4 * (kwh - BREAK3));</span><br></pre></td></tr></table></figure><p>也就是说，该程序由一个<code>if else</code>语句组成，<code>else</code>部分包含另一个<code>if else</code>语句，该<code>if else</code>语句的<code>else</code>部分又包含另一个<code>if else</code>语句。第2个<code>if else</code>语句嵌套在第 1个<code>if else</code>语句中，第3个<code>if else</code>语句嵌套在第2个<code>if else</code>语句中。回忆一下，整个<code>if else</code>语句被视为一条语句，因此不必把嵌套的<code>if else</code>语句用花括号括起来。当然，花括号可以更清楚地表明这种特殊格式的含义。</p>\n<p>这两种形式完全等价。唯一不同的是使用空格和换行的位置不同，不过编译器会忽略这些。尽管如此，第1种形式还是好些，因为这种形式更清楚地显示了有4种选择。在浏览程序时，这种形式让读者更容易看清楚各项选择。在需要时要缩进嵌套的部分，例如，必须测试两个单独的量时。本例中，仅在夏季对用电量超过720kWh的用户加收10%的电费，就属于这种情况。</p>\n<p>可以把多个<code>else if</code>语句连成一串使用，如下所示（当然，要在编译器的限制范围内）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (score &lt; <span class=\"number\">1000</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">1500</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">2000</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &lt; <span class=\"number\">2500</span>)</span><br><span class=\"line\">\tbonus = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">\tbonus = <span class=\"number\">6</span>;</span><br></pre></td></tr></table></figure><p>（这可能是一个游戏程序的一部分，<code>bonus</code>表示下一局游戏获得的光子炸弹或补给。）</p>\n<p>对于编译器的限制范围，C99标准要求编译器最少支持127层套嵌。</p>\n<h3 id=\"else与if配对\">else与if配对<a href=\"#else与if配对\" title=\"else与if配对\"></a></h3><p>如果程序中有许多if和else，编译器如何知道哪个if对应哪个else？例如，考虑下面的程序段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (number &gt; <span class=\"number\">6</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (number &lt; <span class=\"number\">12</span>)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"You're close!\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Sorry, you lose a turn!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>何时打印<code>Sorry, you lose a turn!？</code>当<code>number</code>小于或等于6时，还是<code>number</code>大于12时？换言之，<code>else</code>与第1个<code>if</code>还是第2个<code>if</code>匹配？答案是，<code>else</code>与第2个<code>if</code>匹配。也就是说，输入的数字和匹配的响应如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">数字　　　 响应</span><br><span class=\"line\"><span class=\"number\">5</span>　　　　 None</span><br><span class=\"line\"><span class=\"number\">10</span>　　　　You’re <span class=\"built_in\">close</span>!</span><br><span class=\"line\"><span class=\"number\">15</span>　　　　Sorry, you lose a <span class=\"built_in\">turn</span>!</span><br></pre></td></tr></table></figure><p>规则是，如果没有花括号，<code>else</code>与离它最近的<code>if</code>匹配，除非最近的<code>if</code>被花括号括起来（见图7.2）。</p>\n","next":{"title":"emoji符号大全","link":"posts/e193db5d"},"plink":"https://dxsummer.gitee.io/posts/3e5d0fae/","toc":[{"id":"if语句","title":"if语句","index":"1"},{"id":"if-else语句","title":"if else语句","index":"2","children":[{"id":"另一个示例：介绍getchar和putchar","title":"另一个示例：介绍getchar()和putchar()","index":"2.1"},{"id":"ctypeh系列的字符函数","title":"ctype.h系列的字符函数","index":"2.2"},{"id":"多重选择else-if","title":"多重选择else if","index":"2.3"},{"id":"else与if配对","title":"else与if配对","index":"2.4"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/3e5d0fae/\" title=\"C控制语句：分支和跳转\">https://dxsummer.gitee.io/posts/3e5d0fae/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年6月6日","updated":"2020年6月6日"}}