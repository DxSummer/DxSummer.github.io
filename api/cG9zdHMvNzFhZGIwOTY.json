{"title":"Step7 函数","date":"2020-06-10T12:21:48.000Z","date_formatted":{"ll":"2020年6月10日","L":"2020/06/10","MM-DD":"06-10"},"link":"posts/71adb096","comments":true,"tags":["C语言基础"],"categories":["C语言"],"updated":"2020-06-10T13:27:52.241Z","content":"<p>本章介绍以下内容：</p>\n<p>关键字：<code>return</code></p>\n<p>运算符：<code>*</code>（一元）、<code>&amp;</code>（一元）</p>\n<ul><li>函数及其定义方式</li>\n<li>如何使用参数和返回值</li>\n<li>如何把指针变量用作函数参数</li>\n<li>函数类型</li>\n<li>ANSI C原型</li>\n<li>递归</li>\n</ul><p>如何组织程序？C的设计思想是，把函数用作构件块。我们已经用过C标准库的函数，如<code>printf()</code>、<code>scanf()</code>、<code>getchar()</code>、<code>putchar()</code>和 <code>strlen()</code>。现在要进一步学习如何创建自己的函数。前面章节中已大致介绍了相关过程，本章将巩固以前学过的知识并做进一步的拓展。</p>\n<h2 id=\"复习函数\">复习函数<a href=\"#复习函数\" title=\"复习函数\"></a></h2><p>首先，什么是函数？函数（function）是完成特定任务的独立程序代码单元。语法规则定义了函数的结构和使用方式。虽然C中的函数和其他语言中的函数、子程序、过程作用相同，但是细节上略有不同。一些函数执行某些动作，如printf()把数据打印到屏幕上；一些函数找出一个值供程序使用，如strlen()把指定字符串的长度返回给程序。一般而言，函数可以同时具备以上两种功能。</p>\n<p>为什么要使用函数？首先，使用函数可以省去编写重复代码的苦差。如果程序要多次完成某项任务，那么只需编写一个合适的函数，就可以在需要时使用这个函数，或者在不同的程序中使用该函数，就像许多程序中使用putchar()一样。其次，即使程序只完成某项任务一次，也值得使用函数。因为函数让程序更加模块化，从而提高了程序代码的可读性，更方便后期修改、完善。例如，假设要编写一个程序完成以下任务：</p>\n<p>读入一系列数字；</p>\n<p>分类这些数字；</p>\n<p>找出这些数字的平均值；</p>\n<p>打印一份柱状图。</p>\n<p>可以使用下面的程序：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　SIZE　50</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span> <span class=\"built_in\">list</span>[SIZE];</span><br><span class=\"line\">    readlist(<span class=\"built_in\">list</span>,SIZE);</span><br><span class=\"line\">    sort(<span class=\"built_in\">list</span>,SIZE);</span><br><span class=\"line\">    average(<span class=\"built_in\">list</span>,SIZE);</span><br><span class=\"line\">    bargraph(<span class=\"built_in\">list</span>,SIZE);</span><br><span class=\"line\">    returnb <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>当然，还要编写4个函数<code>readlist()</code>、<code>sort()</code>、<code>average()</code>和<code>bargraph()</code>的实现细节。描述性的函数名能清楚地表达函数的用途和组织结构。然后，单独设计和测试每个函数，直到函数都能正常完成任务。如果这些函数够通用，还可以用于其他程序。</p>\n<p>许多程序员喜欢把函数看作是根据传入信息（输入）及其生成的值或响应的动作（输出）来定义的“黑盒”。如果不是自己编写函数，根本不用关心黑盒的内部行为。例如，使用<code>printf()</code>时，只需知道给该函数传入格式字符串或一些参数以及 printf()生成的输出，无需了解 printf()的内部代码。以这种方式看待函数有助于把注意力集中在程序的整体设计，而不是函数的实现细节上。因此，在动手编写代码之前，仔细考虑一下函数应该完成什么任务，以及函数和程序整体的关系。</p>\n<p>如何了解函数？首先要知道如何正确地定义函数、如何调用函数和如何建立函数间的通信。我们从一个简单的程序示例开始，帮助读者理清这些内容，然后再详细讲解。</p>\n<h3 id=\"创建并使用简单函数\">创建并使用简单函数<a href=\"#创建并使用简单函数\" title=\"创建并使用简单函数\"></a></h3><p>我们的第1个目标是创建一个在一行打印40个星号的函数，并在一个打印表头的程序中使用该函数。如程序清单9.1所示，该程序由main()和starbar()组成。</p>\n<p>程序清单9.1 lethead1.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* lethead1.c */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　NAME　<span class=\"meta-string\">\"GIGATHINK,　INC.\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　ADDRESS　<span class=\"meta-string\">\"101　Megabuck　Plaza\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　PLACE　<span class=\"meta-string\">\"Megapolis,　CA　94904\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　WIDTH　40</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">starbar</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;　<span class=\"comment\">/* 函数原型 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    starbar();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,NAME);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,ADDRESS);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%s\\n\"</span>,PLACE);</span><br><span class=\"line\">    starbar();　　　<span class=\"comment\">/* 使用函数 */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">starbar</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span>　<span class=\"comment\">/* 定义函数　 */</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>　count;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(count=<span class=\"number\">1</span>;count&lt;=WIDTH;count++)</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">'*'</span>);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">****************************************</span><br><span class=\"line\">GIGATHINK,　INC.</span><br><span class=\"line\"><span class=\"number\">101</span>　Megabuck　Plaza</span><br><span class=\"line\">Megapolis,　CA　<span class=\"number\">94904</span></span><br><span class=\"line\">****************************************</span><br></pre></td></tr></table></figure><h3 id=\"分析程序\">分析程序<a href=\"#分析程序\" title=\"分析程序\"></a></h3><p>该程序要注意以下几点。</p>\n<p>程序在3处使用了<code>starbar</code>标识符：函数原型（function prototype）告诉编译器函数<code>starbar()</code>的类型；函数调用（function call）表明在此处执行函数；函数定义（function definition）明确地指定了函数要做什么。</p>\n<p>函数和变量一样，有多种类型。任何程序在使用函数之前都要声明该函数的类型。因此，在main()函数定义的前面出现了下面的ANSI C风格的函数原型：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">starbar</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>圆括号表明starbar是一个函数名。第1个void是函数类型，void类型表明函数没有返回值。第2个void（在圆括号中）表明该函数不带参数。分号表明这是在声明函数，不是定义函数。也就是说，这行声明了程序将使用一个名为starbar()、没有返回值、没有参数的函数，并告诉编译器在别处查找该函数的定义。对于不识别ANSI C风格原型的编译器，只需声明函数的类型，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">starbar</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure><p>注意，一些老版本的编译器甚至连void都识别不了。如果使用这种编译器，就要把没有返回值的函数声明为int类型。当然，最好还是换一个新的编译器。</p>\n<p>一般而言，函数原型指明了函数的返回值类型和函数接受的参数类型。这些信息称为该函数的签名（signature）。对于starbar()函数而言，其签名是该函数没有返回值，没有参数。</p>\n<p>程序把 <code>starbar()</code>原型置于 <code>main()</code>的前面。当然，也可以放在 <code>main()</code>里面的声明变量处。放在哪个位置都可以。</p>\n<p>在<code>main()</code>中，执行到下面的语句时调用了<code>starbar()</code>函数：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">starbar();</span><br></pre></td></tr></table></figure><p>这是调用<code>void</code>类型函数的一种形式。当计算机执行到<code>starbar();</code>语句时，会找到该函数的定义并执行其中的内容。执行完<code>starbar()</code>中的代码后，计算机返回主调函数（calling function）继续执行下一行（本例中，主调函数是main()），见图9.1（更确切地说，编译器把C程序翻译成执行以上操作的机器语言代码）。</p>\n<p>程序中<code>strarbar()</code>和<code>main()</code>的定义形式相同。首先函数头包括函数类型、函数名和圆括号，接着是左花括号、变量声明、函数表达式语句，最后以右花括号结束（见图9.2）。注意，函数头中的<code>starbar()</code>后面没有分号，告诉编译器这是定义<code>starbar()</code>，而不是调用函数或声明函数原型。</p>\n<p>程序把 <code>starbar()</code>和 <code>main()</code>放在一个文件中。当然，也可以把它们分别放在两个文件中。把函数都放在一个文件中的单文件形式比较容易编译，而使用多个文件方便在不同的程序中使用同一个函数。如果把函数放在一个单独的文件中，要把<code>#define</code> 和<code>#include</code> 指令也放入该文件。我们稍后会讨论使用多个文件的情况。现在，先把所有的函数都放在一个文件中。<code>main()</code>的右花括号告诉编译器该函数结束的位置，后面的<code>starbar()</code>函数头告诉编译器<code>starbar()</code>是一个函数。</p>\n","next":{"title":"Step6 字符输入/输出和输入验证","link":"posts/86602531"},"plink":"https://dxsummer.gitee.io/posts/71adb096/","toc":[{"id":"复习函数","title":"复习函数","index":"1","children":[{"id":"创建并使用简单函数","title":"创建并使用简单函数","index":"1.1"},{"id":"分析程序","title":"分析程序","index":"1.2"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/71adb096/\" title=\"Step7 函数\">https://dxsummer.gitee.io/posts/71adb096/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年6月10日","updated":"2020年6月10日"}}