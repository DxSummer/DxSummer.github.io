{"title":"线性表","date":"2020-10-01T15:17:20.000Z","date_formatted":{"ll":"2020年10月1日","L":"2020/10/01","MM-DD":"10-01"},"link":"posts/40f24371","comments":true,"tags":["数据结构"],"categories":["数据结构"],"updated":"2020-10-03T14:56:32.510Z","content":"<h1 id=\"线性表的定义和特点\">线性表的定义和特点<a href=\"#线性表的定义和特点\" title=\"线性表的定义和特点\"></a></h1><p>同一线性表的元素必定具有相同的特性，即属于同一数据对象，相邻数据元素之间存在着序偶关系</p>\n<p>由n（n&gt;=0）个数据特性相同的<strong>元素</strong>构成的有限序列称为<strong>线性表</strong></p>\n<p>线性表中元素的个数n（n&gt;=0）定义为线性表的长度，n=0时称为<strong>空表</strong></p>\n<p><strong>非空线性表或线性结构的特点</strong></p>\n<ol><li>存在唯一的一个被称作“第一个”的数据元素</li>\n<li>存在唯一的一个被称作“最后一个”的数据元素</li>\n<li>除第一个之外，结构中的每个数据元素均只有一个前驱</li>\n<li>除最后一个之外，结构中的每个数据元素均只有一个后继</li>\n</ol><h2 id=\"什么是线性表\">什么是线性表<a href=\"#什么是线性表\" title=\"什么是线性表\"></a></h2><p><strong>线性表</strong>，全名为<strong>线性存储结构</strong>。使用线性表存储数据的方式可以这样理解，即“<font color=\"red\">把所有数据用一根线儿<a href=\"http://data.biancheng.net/view/175.html\" target=\"_blank\">串</a>起来，再存储到物理空间中</font>”。</p>\n<p>首先，用“一根线儿”把它们按照顺序“串”起来，如图 2 所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/1-1Q12021551W22.gif\" class=\"φcy\"><br>图 2 数据的”线性”结构</p>\n<p>图 2 中，左侧是“串”起来的数据，右侧是空闲的物理空间。把这“一串儿”数据放置到物理空间，我们可以选择以下两种方式，如图 3 所示。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/1-1Q120215009361.gif\" class=\"φcy\" alt=\"两种线性存储结构\"><br>图 3 两种线性存储结构</p>\n<p>图 3a) 是多数人想到的存储方式，而图 3b) 却少有人想到。我们知道，数据存储的成功与否，取决于是否能将数据完整地复原成它本来的样子。如果把图 3a) 和图 3b) 线的一头扯起，你会发现数据的位置依旧没有发生改变（和图 1 一样）。因此可以认定，这两种存储方式都是正确的。</p>\n<p><mark>将具有“一对一”关系的数据“线性”地存储到物理空间中，这种存储结构就称为线性存储结构（简称线性表）。</mark></p>\n<p>使用线性表存储的数据，如同向<a href=\"http://data.biancheng.net/view/181.html\" target=\"_blank\">数组</a>中存储数据那样，要求<strong>数据类型必须一致</strong>，也就是说，线性表存储的数据，要么全不都是整形，要么全部都是字符串。一半是整形，另一半是字符串的一组数据无法使用线性表存储。</p>\n<h2 id=\"顺序存储结构和链式存储结构\">顺序存储结构和链式存储结构<a href=\"#顺序存储结构和链式存储结构\" title=\"顺序存储结构和链式存储结构\"></a></h2><p>图 3 中我们可以看出，线性表存储数据可细分为以下 2 种：</p>\n<ol><li><p>如图 3a) 所示，将数据依次<strong>存储在连续的整块物理空间</strong>中，这种存储结构称为<font color=\"red\">顺序存储结构（简称<a href=\"http://data.biancheng.net/view/158.html\" target=\"_blank\">顺序表</a>）</font>；</p>\n</li>\n<li><p>如图 3b) 所示，数据<strong>分散的存储在物理空间中</strong>，通过一根线保存着它们之间的逻辑关系，这种存储结构称为<font color=\"green\">链式存储结构（简称<a href=\"http://data.biancheng.net/view/160.html\" target=\"_blank\">链表</a>）</font>；</p>\n</li>\n</ol><p>也就是说，线性表存储结构可细分为<strong>顺序存储结构</strong>和<strong>链式存储结构</strong>。</p>\n<h2 id=\"线性表常用术语\">线性表常用术语<a href=\"#线性表常用术语\" title=\"线性表常用术语\"></a></h2><p>数据结构中，一组数据中的每个个体被称为“<font color=\"green\">数据元素</font>”（简称“元素”）。例如，图 1 显示的这组数据，其中 1、2、3、4 和 5 都是这组数据钟的一个元素。</p>\n<p>另外，对于具有“一对一”逻辑关系的数据，我们一直在用“某一元素的左侧（前边）或右侧（后边）”这样不专业的词，其实线性表中有更准确的术语：</p>\n<ul><li>某一元素的左侧相邻元素称为“<font color=\"green\">直接前驱</font>”，位于此元素左侧的所有元素都统称为“<font color=\"green\">前驱元素</font>”；</li>\n<li>某一元素的右侧相邻元素称为“<font color=\"green\">直接后继</font>”，位于此元素右侧的所有元素都统称为“<font color=\"green\">后继元素</font>”；</li>\n</ul><p>以图 1 数据中的元素 3 来说，它的直接前驱是 2 ，此元素的前驱元素有 2 个，分别是 1 和 2；同理，此元素的直接后继是 4 ，后继元素也有 2 个，分别是 4 和 5。如图 4 所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/1-1Q1202152464R.gif\" class=\"φcy\" alt=\"前驱和后继\"><br>图 4 前驱和后继</p>\n<h1 id=\"线性表的顺序表示和实现\">线性表的顺序表示和实现<a href=\"#线性表的顺序表示和实现\" title=\"线性表的顺序表示和实现\"></a></h1><h2 id=\"顺序存储表示\">顺序存储表示<a href=\"#顺序存储表示\" title=\"顺序存储表示\"></a></h2><ul><li>用一组地址连续的存储单元依次存储线性表的数据元素，这种表示也称<strong>线性表的顺序存储结构</strong>或<strong>顺序映像</strong>，这种存储结构的线性表为<strong>顺序表</strong></li>\n<li>逻辑上相邻的数据元素，物理次序也相邻</li>\n<li><font color=\"red\">顺序表存储数据时，会提前申请一整块足够大小的物理空间，然后将数据依次存储起来，存储时做到数据元素之间不留一丝缝隙</font></li>\n</ul><blockquote>\n<p>线性表的顺序存储结构是一种<mark>随机存取</mark></p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201003225615.png\" class=\"φcy\"></p>\n<blockquote>\n<p>LOC(a<sub>i+1</sub>) = LOC(a<sub>i</sub>) + l</p>\n<p>LOC(a<sub>i</sub>) = LOC(a<sub>1</sub>) + (i-1) x l</p>\n</blockquote>\n<ul><li><p>i：第i个数据元素    </p>\n</li>\n<li><p>LOC(a<sub>i</sub>)：第i个数据元素的存储地址    </p>\n</li>\n<li><p>L：每个元素占用L个存储单位</p>\n</li>\n</ul><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/IMG_1360(20201002-123156).JPG\" style=\"zoom: 20%;\" /><h2 id=\"顺序表的基本操作的实现\">顺序表的基本操作的实现<a href=\"#顺序表的基本操作的实现\" title=\"顺序表的基本操作的实现\"></a></h2><h3 id=\"顺序表的初始化\">顺序表的初始化<a href=\"#顺序表的初始化\" title=\"顺序表的初始化\"></a></h3><p><strong>使用顺序表存储数据之前，除了要申请足够大小的物理空间之外，为了方便后期使用表中的数据，顺序表还需要实时记录以下 2 项数据：</strong></p>\n<ol><li>顺序表申请的存储容量；</li>\n<li>顺序表的长度，也就是表中存储数据元素的个数；</li>\n</ol><p><font color=\"purple\">提示：正常状态下，顺序表申请的存储容量要大于顺序表的长度。</font></p>\n<p>自定义顺序表，C 语言实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * head;<span class=\"comment\">//声明了一个名为head的长度不确定的数组，也叫“动态数组”</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;<span class=\"comment\">//记录当前顺序表的长度</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;<span class=\"comment\">//记录顺序表分配的存储容量</span></span><br><span class=\"line\">&#125;table;</span><br></pre></td></tr></table></figure><p>注意，<code>head</code> 是我们声明的一个未初始化的动态数组，不要只把它看做是普通的指针。</p>\n<p>接下来开始学习顺序表的初始化，也就是初步建立一个顺序表。建立顺序表需要做如下工作：</p>\n<ul><li>给 <code>head</code> 动态数据申请足够大小的物理空间；</li>\n<li>给 <code>size</code> 和 <code>length</code> 赋初值；</li>\n</ul><p>C 语言实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Size 5 <span class=\"comment\">//对Size进行宏定义，表示顺序表申请空间的大小</span></span></span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">initTable</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    table t;</span><br><span class=\"line\">    t.head = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(Size * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));<span class=\"comment\">//构造一个空的顺序表，动态申请存储空间</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!t.head) <span class=\"comment\">//如果申请失败，作出提示并直接退出程序</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"初始化失败\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length = <span class=\"number\">0</span>;<span class=\"comment\">//空表的长度初始化为0</span></span><br><span class=\"line\">    t.<span class=\"built_in\">size</span> = Size;<span class=\"comment\">//空表的初始存储空间为Size</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>整个顺序表初始化的过程被封装到了一个函数中，此函数返回值是一个已经初始化完成的顺序表。这样做的好处是增加了代码的可用性，也更加美观。与此同时，顺序表初始化过程中，要注意对物理空间的申请进行判断，对申请失败的情况进行处理，这里只进行了“输出提示信息和强制退出”的操作，可以根据你自己的需要对代码中的 <code>if</code> 语句进行改进。</p>\n<p>通过在主函数中调用 <code>initTable</code> 语句，就可以成功创建一个空的顺序表，与此同时我们还可以试着向顺序表中添加一些元素，C 语言实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;  //malloc()、exit()</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Size 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;table;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">initTable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    table t;</span><br><span class=\"line\">    t.head = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(Size * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!t.head)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"初始化失败\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    t.<span class=\"built_in\">size</span> = Size;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//输出顺序表中元素的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayTable</span><span class=\"params\">(table t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, t.head[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    table t = initTable();</span><br><span class=\"line\">    <span class=\"comment\">//向顺序表中添加元素</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= Size; i++) &#123;</span><br><span class=\"line\">        t.head[i - <span class=\"number\">1</span>] = i;</span><br><span class=\"line\">        t.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"顺序表中存储的元素分别是：\\n\"</span>);</span><br><span class=\"line\">    displayTable(t);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">顺序表中存储的元素分别是：</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>可以看到，顺序表初始化成功。</p>\n<h3 id=\"顺序表插入元素\">顺序表插入元素<a href=\"#顺序表插入元素\" title=\"顺序表插入元素\"></a></h3><p>向已有顺序表中插入数据元素，根据插入位置的不同，可分为以下 3 种情况：</p>\n<ol><li>插入到顺序表的表头；</li>\n<li>在表的中间位置插入元素；</li>\n<li>尾随顺序表中已有元素，作为顺序表中的最后一个元素；</li>\n</ol><p>虽然数据元素插入顺序表中的位置有所不同，但是都使用的是同一种方式去解决，即：通过遍历，找到数据元素要插入的位置，然后做如下两步工作：</p>\n<ul><li>将要插入位置元素以及后续的元素整体向后移动一个位置；</li>\n<li>将元素放到腾出来的位置上；</li>\n</ul><p>例如，在 <code>{1,2,3,4,5}</code> 的第 3 个位置上插入元素 6，实现过程如下：</p>\n<ul><li>遍历至顺序表存储第 3 个数据元素的位置，如<a href=\"http://data.biancheng.net/view/200.html\" target=\"_blank\">图</a> 1 所示：</li>\n</ul><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/2-1Q122201300X8.gif\" class=\"φcy\" alt=\"找到目标元素位置\"><br>图 1 找到目标元素位置</p>\n<ul><li>将元素 3 以及后续元素 4 和 5 整体向后移动一个位置，如图 2 所示：</li>\n</ul><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201002151042.gif\" class=\"φcy\" alt=\"将插入位置腾出\"><br>图 2 将插入位置腾出</p>\n<ul><li>将新元素 6 放入腾出的位置，如图 3 所示：</li>\n</ul><p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201002151117.gif\" class=\"φcy\" alt=\"插入目标元素\"><br>图 3 插入目标元素</p>\n<p>顺序表插入数据元素的 C 语言实现代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//插入函数，其中，elem为插入的元素，add为插入到顺序表的位置</span></span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">addTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"comment\">//判断插入本身是否存在问题（如果插入元素位置比整张表的长度+1还大（如果相等，是尾随的情况），或者插入的位置本身不存在，程序作为提示并自动退出）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length + <span class=\"number\">1</span> || add &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置有问题\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//做插入操作时，首先需要看顺序表是否有多余的存储空间提供给插入的元素，如果没有，需要申请</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.length == t.<span class=\"built_in\">size</span>) &#123;</span><br><span class=\"line\">        t.head = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">realloc</span>(t.head, (t.<span class=\"built_in\">size</span> + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t.head) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"存储分配失败\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.<span class=\"built_in\">size</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入操作，需要将从插入位置开始的后续元素，逐个后移</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = t.length - <span class=\"number\">1</span>; i &gt;= add - <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        t.head[i + <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//后移完成后，直接将所需插入元素，添加到顺序表的相应位置</span></span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = elem;</span><br><span class=\"line\">    <span class=\"comment\">//由于添加了元素，所以长度+1</span></span><br><span class=\"line\">    t.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意，动态<a href=\"http://data.biancheng.net/view/181.html\" target=\"_blank\">数组</a>额外申请更多物理空间使用的是 realloc 函数。并且，在实现后续元素整体后移的过程，目标位置其实是有数据的，还是 3，只是下一步新插入元素时会把旧元素直接覆盖。</p>\n<h3 id=\"顺序表删除元素\">顺序表删除元素<a href=\"#顺序表删除元素\" title=\"顺序表删除元素\"></a></h3><p>从顺序表中删除指定元素，实现起来非常简单，只需找到目标元素，并将其后续所有元素整体前移 1 个位置即可。</p>\n<p>后续元素整体前移一个位置，会直接将目标元素删除，可间接实现删除元素的目的。</p>\n<p>例如，从 <code>{1,2,3,4,5}</code> 中删除元素 3 的过程如图 4 所示：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/dxsummer/cdn/img/data/20201002151140.gif\" class=\"φcy\" alt=\"img\"><br>图 4 顺序表删除元素的过程示意图</p>\n<p>因此，顺序表删除元素的 C 语言实现代码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">table <span class=\"title\">delTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length || add &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"被删除元素的位置有误\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//删除操作</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = add; i &lt; t.length; i++) &#123;</span><br><span class=\"line\">        t.head[i - <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"顺序表查找元素\">顺序表查找元素<a href=\"#顺序表查找元素\" title=\"顺序表查找元素\"></a></h3><p>顺序表中查找目标元素，可以使用多种查找算法实现，比如说<a href=\"http://data.biancheng.net/view/55.html\" target=\"_blank\">二分查找</a>算法、插值查找算法等。这里，我们选择<a href=\"http://data.biancheng.net/view/54.html\" target=\"_blank\">顺序查找</a>算法，具体实现代码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//查找函数，其中，elem表示要查找的数据元素的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.head[i] == elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;<span class=\"comment\">//如果查找失败，返回-1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><h3 id=\"顺序表更改元素\">顺序表更改元素<a href=\"#顺序表更改元素\" title=\"顺序表更改元素\"></a></h3><p>顺序表更改元素的实现过程是：</p>\n<ol><li>找到目标元素；</li>\n<li>直接修改该元素的值；</li>\n</ol><p>顺序表更改元素的 C 语言实现代码为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//更改函数，其中，elem为要更改的元素，newElem为新的数据元素</span></span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">amendTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> newElem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add = selectTable(t, elem);</span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = newElem;<span class=\"comment\">//由于返回的是元素在顺序表中的位置，所以-1就是该元素在数组中的下标</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>以上是顺序表使用过程中最常用的基本操作，这里给出本节完整的实现代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Size 5</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Table</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> * head;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> <span class=\"built_in\">size</span>;</span><br><span class=\"line\">&#125;table;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">initTable</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    table t;</span><br><span class=\"line\">    t.head = (<span class=\"keyword\">int</span>*)<span class=\"built_in\">malloc</span>(Size * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!t.head)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"初始化失败\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length = <span class=\"number\">0</span>;</span><br><span class=\"line\">    t.<span class=\"built_in\">size</span> = Size;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">addTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> add)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length + <span class=\"number\">1</span> || add &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"插入位置有问题\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (t.length &gt;= t.<span class=\"built_in\">size</span>) &#123;</span><br><span class=\"line\">        t.head = (<span class=\"keyword\">int</span> *)<span class=\"built_in\">realloc</span>(t.head, (t.<span class=\"built_in\">size</span> + <span class=\"number\">1</span>) * <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!t.head) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">\"存储分配失败\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.<span class=\"built_in\">size</span> += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = t.length - <span class=\"number\">1</span>; i &gt;= add - <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        t.head[i + <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = elem;</span><br><span class=\"line\">    t.length++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">delTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> add)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (add &gt; t.length || add &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"被删除元素的位置有误\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = add; i &lt; t.length; i++) &#123;</span><br><span class=\"line\">        t.head[i - <span class=\"number\">1</span>] = t.head[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    t.length--;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">selectTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t.head[i] == elem) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">table <span class=\"title\">amendTable</span><span class=\"params\">(table t, <span class=\"keyword\">int</span> elem, <span class=\"keyword\">int</span> newElem)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> add = selectTable(t, elem);</span><br><span class=\"line\">    t.head[add - <span class=\"number\">1</span>] = newElem;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">displayTable</span><span class=\"params\">(table t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; t.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d \"</span>, t.head[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i, add;</span><br><span class=\"line\">    table t1 = initTable();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= Size; i++) &#123;</span><br><span class=\"line\">        t1.head[i - <span class=\"number\">1</span>] = i;</span><br><span class=\"line\">        t1.length++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"原顺序表：\\n\"</span>);</span><br><span class=\"line\">    displayTable(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"删除元素1:\\n\"</span>);</span><br><span class=\"line\">    t1 = delTable(t1, <span class=\"number\">1</span>);</span><br><span class=\"line\">    displayTable(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"在第2的位置插入元素5:\\n\"</span>);</span><br><span class=\"line\">    t1 = addTable(t1, <span class=\"number\">5</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">    displayTable(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"查找元素3的位置:\\n\"</span>);</span><br><span class=\"line\">    add = selectTable(t1, <span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, add);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"将元素3改为6:\\n\"</span>);</span><br><span class=\"line\">    t1 = amendTable(t1, <span class=\"number\">3</span>, <span class=\"number\">6</span>);</span><br><span class=\"line\">    displayTable(t1);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序运行结果为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原顺序表：</span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">删除元素<span class=\"number\">1</span>:</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">在第<span class=\"number\">2</span>的位置插入元素<span class=\"number\">5</span>:</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">查找元素<span class=\"number\">3</span>的位置:</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\">将元素<span class=\"number\">3</span>改为<span class=\"number\">6</span>:</span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br></pre></td></tr></table></figure>","prev":{"title":"初识css","link":"posts/dfb45e1c"},"next":{"title":"HTML5","link":"posts/98f3a6d9"},"plink":"https://dxsummer.gitee.io/posts/40f24371/","toc":[{"id":"线性表的定义和特点","title":"线性表的定义和特点","index":"1","children":[{"id":"什么是线性表","title":"什么是线性表","index":"1.1"},{"id":"顺序存储结构和链式存储结构","title":"顺序存储结构和链式存储结构","index":"1.2"},{"id":"线性表常用术语","title":"线性表常用术语","index":"1.3"}]},{"id":"线性表的顺序表示和实现","title":"线性表的顺序表示和实现","index":"2","children":[{"id":"顺序存储表示","title":"顺序存储表示","index":"2.1"},{"id":"顺序表的基本操作的实现","title":"顺序表的基本操作的实现","index":"2.2","children":[{"id":"顺序表的初始化","title":"顺序表的初始化","index":"2.2.1"},{"id":"顺序表插入元素","title":"顺序表插入元素","index":"2.2.2"},{"id":"顺序表删除元素","title":"顺序表删除元素","index":"2.2.3"},{"id":"顺序表查找元素","title":"顺序表查找元素","index":"2.2.4"},{"id":"顺序表更改元素","title":"顺序表更改元素","index":"2.2.5"}]}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/40f24371/\" title=\"线性表\">https://dxsummer.gitee.io/posts/40f24371/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年10月1日","updated":"2020年10月3日"}}