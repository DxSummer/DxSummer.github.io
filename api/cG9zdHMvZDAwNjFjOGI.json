{"title":"运算符、表达式和语句","date":"2020-05-30T08:10:08.000Z","date_formatted":{"ll":"2020年5月30日","L":"2020/05/30","MM-DD":"05-30"},"link":"posts/d0061c8b","comments":true,"categories":["C语言"],"updated":"2020-06-01T02:18:39.087Z","content":"<h1 id=\"运算符、表达式和语句\">[运算符、表达式和语句]<a href=\"#运算符、表达式和语句\" title=\"[运算符、表达式和语句]\"></a></h1><p>本章介绍以下内容：</p>\n<p>关键字：<code>while</code>、<code>typedef</code></p>\n<p>运算符：<code>=</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code>、(类型名)</p>\n<p>C语言的各种运算符，包括用于普通数学运算的运算符</p>\n<p>运算符优先级以及语句、表达式的含义</p>\n<p>while循环</p>\n<p>复合语句、自动类型转换和强制类型转换</p>\n<p>如何编写带有参数的函数</p>\n<p>现在，读者已经熟悉了如何表示数据，接下来我们学习如何处理数据。C 语言为处理数据提供了大量的操作，可以在程序中进行算术运算、比较值的大小、修改变量、逻辑地组合关系等。我们先从基本的算术运算（<strong>加、减、乘、除</strong>）开始。</p>\n<p>组织程序是处理数据的另一个方面，让程序按正确的顺序执行各个步骤。C 有许多语言特性，帮助你完成组织程序的任务。循环就是其中一个特性，本章中你将窥其大概。循环能重复执行行为，让程序更有趣、更强大。</p>\n<h2 id=\"循环简介\">循环简介<a href=\"#循环简介\" title=\"循环简介\"></a></h2><p>程序清单5.1是一个简单的程序示例，该程序进行了简单的运算，计算穿9码男鞋的脚长（单位：英寸）。为了让读者体会循环的好处，程序的第1个版本演示了不使用循环编程的局限性。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">5.1</span> shoes1.c程序</span><br><span class=\"line\"><span class=\"comment\">/* shoes1.c -- 把鞋码转换成英寸 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADJUST 7.31　　　　　　　　　　<span class=\"comment\">// 字符常量</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> SCALE = <span class=\"number\">0.333</span>;<span class=\"comment\">// const变量</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span>　shoe,　foot;</span><br><span class=\"line\">    shoe　=　<span class=\"number\">9.0</span>;</span><br><span class=\"line\">    foot = SCALE * shoe + ADJUST;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Shoe　size　(men's)　　 foot　length\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%10.1f　%15.2f　inches\\n\"</span>,　shoe,　foot);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shoe　size　(men's)　foot　length</span><br><span class=\"line\">\t<span class=\"number\">9.0</span>　　　　<span class=\"number\">10.31</span>　inches</span><br></pre></td></tr></table></figure><p>该程序演示了用<code>#define</code> 指令创建符号常量和用 <code>const</code> 限定符创建在程序运行过程中不可更改的变量。程序使用了乘法和加法，假定用户穿9码的鞋，以英寸为单位打印用户的脚长。你可能会说：“这太简单了，我用笔算比敲程序还要快。”说得没错。写出来的程序只使用一次（本例即只根据一只鞋的尺码计算一次脚长），实在是浪费时间和精力。如果写成交互式程序会更有用，但是仍无法利用计算机的优势。</p>\n<p>应该让计算机做一些重复计算的工作。毕竟，需要重复计算是使用计算机的主要原因。C 提供多种方法做重复计算，我们在这里简单介绍一种——<strong>while循环</strong>。它能让你对运算符做更有趣地探索。程序清单5.2演示了用循环改进后的程序。</p>\n<p>程序清单5.2 shoes2.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* shoes2.c -- 计算多个不同鞋码对应的脚长 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> ADJUST 7.31　　　　　　　　　　<span class=\"comment\">// 字符常量</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> SCALE = <span class=\"number\">0.333</span>;<span class=\"comment\">// const变量</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span>　shoe,　foot;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Shoe size (men's) foot length\\n\"</span>);</span><br><span class=\"line\">    shoe　=　<span class=\"number\">3.0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (shoe &lt; <span class=\"number\">18.5</span>)　　　　　　<span class=\"comment\">/* while循环开始 */</span></span><br><span class=\"line\">    &#123;　　　　　　　　　　　　　　　<span class=\"comment\">/* 块开始　*/</span></span><br><span class=\"line\">        foot = SCALE * shoe + ADJUST;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%10.1f　%15.2f　inches\\n\"</span>,　shoe,　foot);</span><br><span class=\"line\">        shoe　=　shoe　+　<span class=\"number\">1.0</span>;</span><br><span class=\"line\">    &#125;　　　　　　　　　　　　　　　<span class=\"comment\">/* 块结束　　　 */</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"If　the　shoe　fits,　wear　it.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>下面是shoes2.c程序的输出（…表示并未显示完整，有删节）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Shoe　size　(men's)　foot　length</span><br><span class=\"line\"><span class=\"number\">3.0</span>　　　　　　 <span class=\"number\">8.31</span>　inches</span><br><span class=\"line\"><span class=\"number\">4.0</span>　　　　　　 <span class=\"number\">8.64</span>　inches</span><br><span class=\"line\"><span class=\"number\">5.0</span>　　　　　　 <span class=\"number\">8.97</span>　inches</span><br><span class=\"line\"><span class=\"number\">6.0</span>　　　　　　 <span class=\"number\">9.31</span>　inches</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"number\">16.0</span>　　　　　<span class=\"number\">12.64</span>　inches</span><br><span class=\"line\"><span class=\"number\">17.0</span>　　　　　<span class=\"number\">12.97</span>　inches</span><br><span class=\"line\"><span class=\"number\">18.0</span>　　　　　<span class=\"number\">13.30</span>　inches</span><br><span class=\"line\">If　the　shoe　fits,　wear　it.</span><br></pre></td></tr></table></figure><p>（如果读者对此颇有研究，应该知道该程序不符合实际情况。程序中假定了一个统一的鞋码系统。）</p>\n<p>下面解释一下<code>while</code>循环的原理。当程序第1次到达<code>while</code>循环时，会检查圆括号中的条件是否为真。该程序中，条件表达式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shoe &lt; <span class=\"number\">18.5</span></span><br></pre></td></tr></table></figure><p>符号<code>&lt;</code>的意思是小于。变量<code>shoe</code>被初始化为3.0，显然小于18.5。因此，该条件为真，程序进入块中继续执行，把尺码转换成英寸。然后打印计算的结果。下一条语句把 shoe增加1.0，使shoe的值为4.0：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shoe = shoe + <span class=\"number\">1.0</span>;</span><br></pre></td></tr></table></figure><p>此时，程序返回<code>while</code>入口部分检查条件。为何要返回<code>while</code>的入口部分？因为上面这条语句的下面是右花括号（<code>}</code>），代码使用一对花括号（<code>{}</code>）来标出<code>while</code>循环的范围。花括号之间的内容就是要被重复执行的内容。<strong>花括号以及被花括号括起来的部分被称为块（block）</strong>。现在，回到程序中。因为4小于18.5，所以要重复执行被花括号括起来的所有内容（用计算机术语来说就是，程序循环这些语句）。该循环过程一直持续到shoe的值为19.0。此时，由于19.0小于18.5，所以该条件为假：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shoe &lt; <span class=\"number\">18.5</span></span><br></pre></td></tr></table></figure><p>出现这种情况后，控制转到紧跟<code>while</code>循环后面的第1条语句。该例中，是最后的<code>printf()</code>语句。</p>\n<p>可以很方便地修改该程序用于其他转换。例如，把SCALE设置成1.8、ADJUST设置成32.0，该程序便可把摄氏温度转换成华氏温度；把SCALE设置成0.6214、ADJUST设置成0，该程序便可把公里转换成英里。注意，修改了设置后，还要更改打印的消息，以免前后表述不一。</p>\n<p>通过<code>while</code>循环能便捷灵活地控制程序。现在，我们来学习程序中会用到的基本运算符。</p>\n<h2 id=\"基本运算符\">基本运算符<a href=\"#基本运算符\" title=\"基本运算符\"></a></h2><p>C用运算符（operator）表示算术运算。例如，<code>+</code>运算符使在它两侧的值加在一起。如果你觉得术语“运算符”很奇怪，那么请记住东西总得有个名称。与其叫“那些东西”或“运算处理符”，还不如叫“<strong>运算符</strong>”。现在，我们介绍一下用于基本算术运算的运算符：<code>=</code>、<code>+</code>、<code>-</code>、<code>*</code>和<code>/</code>（C 没有指数运算符。不过，C 的标准数学库提供了一个<code>pow()</code>函数用于指数运算。例如，pow(3.5, 2.2)返回3.5的2.2次幂）。</p>\n<h3 id=\"赋值运算符：\">赋值运算符：=<a href=\"#赋值运算符：\" title=\"赋值运算符：=\"></a></h3><p>在C语言中，=并不意味着“相等”，而是一个赋值运算符。下面的赋值表达式语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bmw = <span class=\"number\">2002</span>;</span><br></pre></td></tr></table></figure><p>把值2002赋给变量<code>bmw</code>。也就是说，<code>=</code>号左侧是一个变量名，右侧是赋给该变量的值。符号<code>=</code>被称为赋值运算符。另外，上面的语句不读作“bmw等于2002”，而读作“把值2002赋给变量bmw”。赋值行为从右往左进行。</p>\n<p>也许变量名和变量值的区别看上去微乎其微，但是，考虑下面这条常用的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = i + <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure><p>对数学而言，这完全行不通。如果给一个有限的数加上 1，它不可能“等于”原来的数。但是，在计算机赋值表达式语句中，这很合理。该语句的意思是：找出变量 i 的值，把该值加 1，然后把新值赋值变量i（见图5.1）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/图5.1.png\" class=\"φcy\"></p>\n<p>在C语言中，类似这样的语句没有意义（实际上是无效的）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2002</span> = bmw;</span><br></pre></td></tr></table></figure><p>因为在这种情况下，2002 被称为右值（rvale），只能是字面常量。不能给常量赋值，常量本身就是它的值。因此，在编写代码时要记住，<strong><code>=</code>号左侧的项必须是一个变量名</strong>。实际上，赋值运算符左侧必须引用一个存储位置。最简单的方法就是使用变量名。不过，后面章节还会介绍“<strong>指针</strong>”，可用于指向一个存储位置。概括地说，C 使用可修改的左值（modifiable lvalue）标记那些可赋值的实体。也许“可修改的左值”不太好懂，我们再来看一些定义。</p>\n<p>几个术语：<strong>数据对象</strong>、<strong>左值</strong>、<strong>右值</strong>和<strong>运算符</strong></p>\n<p>赋值表达式语句的目的是把值储存到内存位置上。用于储存值的数据存储区域统称为<strong>数据对象</strong>（data object）。C 标准只有在提到这个概念时才会用到对象这个术语。使用变量名是标识对象的一种方法。除此之外，还有其他方法，但是要在后面的章节中才学到。例如，可以指定<strong>数组的元素</strong>、<strong>结构的成员</strong>，或者使用<strong>指针表达式</strong>（指针中储存的是它所指向对象的地址）。左值（lvalue）是 C 语言的术语，用于标识特定数据对象的名称或表达式。因此，对象指的是实际的数据存储，而左值是用于标识或定位存储位置的标签。</p>\n<p>对于早期的C语言，提到左值意味着：</p>\n<p>1.它指定一个对象，所以引用内存中的地址；</p>\n<p>2.它可用在赋值运算符的左侧，左值（lvalue）中的l源自left。</p>\n<p>但是后来，标准中新增了<code>const</code>限定符。用<code>const</code>创建的变量不可修改。因此，<code>const</code>标识符满足上面的第1项，但是不满足第2项。一方面C继续把标识对象的表达式定义为左值，一方面某些左值却不能放在赋值运算符的左侧。有些左值不能用于赋值运算符的左侧。此时，标准对左值的定义已经不能满足当前的状况。</p>\n<p>为此，C标准新增了一个术语：可修改的左值（modifiable lvalue），用于标识可修改的对象。所以，赋值运算符的左侧应该是可修改的左值。当前标准建议，使用术语对象定位值（object locator value）更好。</p>\n<p>右值（rvalue）指的是能赋值给可修改左值的量，且本身不是左值。例如，考虑下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bmw = <span class=\"number\">2002</span>;</span><br></pre></td></tr></table></figure><p>这里，<code>bmw</code>是可修改的<strong>左值</strong>，2002是右值。读者也许猜到了，右值中的r源自right。右值可以是常量、变量或其他可求值的表达式（如，函数调用）。实际上，当前标准在描述这一概念时使用的是表达式的值（value of an expression），而不是右值。</p>\n<p>我们看几个简单的示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>　ex;</span><br><span class=\"line\"><span class=\"keyword\">int</span>　why;</span><br><span class=\"line\"><span class=\"keyword\">int</span>　zee;</span><br><span class=\"line\"><span class=\"keyword\">const</span>　<span class=\"keyword\">int</span>　TWO　=　<span class=\"number\">2</span>;</span><br><span class=\"line\">why　=　<span class=\"number\">42</span>;</span><br><span class=\"line\">zee = why;</span><br><span class=\"line\">ex = TWO * (why + zee);</span><br></pre></td></tr></table></figure><p>这里，ex、why和zee都是可修改的左值（或对象定位值），它们可用于赋值运算符的左侧和右侧。<code>TWO</code>是不可改变的左值，它只能用于赋值运算符的右侧（在该例中，TWO被初始化为2，<strong>这里的=运算符表示初始化而不是赋值</strong>，因此并未违反规则）。同时，42 是右值，它不能引用某指定内存位置。另外，why和 zee 是可修改的左值，表达式<code>(why + zee)</code>是右值，该表达式不能表示特定内存位置，而且也不能给它赋值。它只是程序计算的一个临时值，在计算完毕后便会被丢弃。</p>\n<p>在学习名称时，被称为“项”（如，赋值运算符左侧的项）的就是运算对象（operand）。运算对象是运算符操作的对象。例如，可以把吃汉堡描述为：“吃”运算符操作“汉堡”运算对象。类似地可以说，=运算符的左侧运算对象应该是可修改的左值。</p>\n<p>C的基本赋值运算符有些与众不同，请看程序清单5.3。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">5.3</span> golf.c程序</span><br><span class=\"line\"><span class=\"comment\">/* golf.c -- 高尔夫锦标赛记分卡 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>　jane,　tarzan,　cheeta;</span><br><span class=\"line\">    cheeta=tarzan=jane=<span class=\"number\">68</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"cheeta　　tarzan　　 jane\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"First　round　score　%4d　%8d　%8d\\n\"</span>,　cheeta,　tarzan,　jane);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>许多其他语言都会回避该程序中的三重赋值，但是C完全没问题。赋值的顺序是从右往左：首先把68赋给jane，然后再赋给tarzan，最后赋给cheeta。因此，程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cheetah　　tarzan　　　　jane</span><br><span class=\"line\">First　round　score　　<span class=\"number\">68</span>　　　　　　<span class=\"number\">68</span>　　　　　　<span class=\"number\">68</span></span><br></pre></td></tr></table></figure><h3 id=\"加法运算符：\">加法运算符：+<a href=\"#加法运算符：\" title=\"加法运算符：+\"></a></h3><p>加法运算符（addition operator）用于加法运算，使其两侧的值相加。例如，语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, <span class=\"number\">4</span> + <span class=\"number\">20</span>);</span><br></pre></td></tr></table></figure><p>打印的是24，而不是表达式</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> + <span class=\"number\">20</span></span><br></pre></td></tr></table></figure><p>相加的值（运算对象）可以是变量，也可以是常量。因此，执行下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">income = salary + bribes;</span><br></pre></td></tr></table></figure><p>计算机会查看加法运算符右侧的两个变量，把它们相加，然后把和赋给变量<code>income</code>。</p>\n<p>在此提醒读者注意，<code>income</code>、<code>salary</code>和<code>bribes</code>都是可修改的左值。因为每个变量都标识了一个可被赋值的数据对象。但是，表达式<code>salary + brives</code>是一个右值。</p>\n<h3 id=\"减法运算符：-\">减法运算符：-<a href=\"#减法运算符：-\" title=\"减法运算符：-\"></a></h3><p>减法运算符（subtraction operator）用于减法运算，使其左侧的数减去右侧的数。例如，下面的语句把200.0赋给takehome：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">takehome = <span class=\"number\">224.00</span> – <span class=\"number\">24.00</span>;</span><br></pre></td></tr></table></figure><p>+和-运算符都被称为二元运算符（binary operator），即这些运算符需要两个运算对象才能完成操作。</p>\n<h3 id=\"符号运算符：-和\">符号运算符：-和+<a href=\"#符号运算符：-和\" title=\"符号运算符：-和+\"></a></h3><p>减号还可用于标明或改变一个值的代数符号。例如，执行下面的语句后，<code>smokey</code>的值为12：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rocky = –<span class=\"number\">12</span>;</span><br><span class=\"line\">smokey = –rocky;</span><br></pre></td></tr></table></figure><p>以这种方式使用的负号被称为<strong>一元运算符</strong>（unary operator）。一元运算符只需要一个运算对象（见图5.2）。</p>\n<img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/一元和二元运算符.png\" style=\"zoom:67%;\" /><p>C90标准新增了<strong>一元+</strong>运算符，它不会改变运算对象的值或符号，只能这样使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dozen &#x3D; +12;</span><br></pre></td></tr></table></figure><p>编译器不会报错。但是在以前，这样做是不允许的。</p>\n<h3 id=\"乘法运算符：\">乘法运算符：*<a href=\"#乘法运算符：\" title=\"乘法运算符：*\"></a></h3><p>符号<code>*</code>表示乘法。下面的语句用2.54乘以inch，并将结果赋给cm：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cm = <span class=\"number\">2.54</span> * inch;</span><br></pre></td></tr></table></figure><p>C没有平方函数，如果要打印一个平方表，怎么办？如程序清单5.4所示，可以使用乘法来计算平方。</p>\n<p>程序清单5.4 squares.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* squares.c -- 计算1～20的平方 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>　num　=　<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>　(num　&lt;　<span class=\"number\">21</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%4d %6d\\n\"</span>, num, num * num);</span><br><span class=\"line\">        num　=　num　+　<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序打印数字1～20及其平方。接下来，我们再看一个更有趣的例子。</p>\n<h4 id=\"指数增长\">指数增长<a href=\"#指数增长\" title=\"指数增长\"></a></h4><p>读者可能听过这样一个故事，一位强大的统治者想奖励做出突出贡献的学者。他问这位学者想要什么，学者指着棋盘说，在第1个方格里放1粒小麦、第2个方格里放2粒小麦、第3个方格里放4粒小麦，第4个方格里放 8 粒小麦，以此类推。这位统治者不熟悉数学，很惊讶学者竟然提出如此谦虚的要求。因为他原本准备奖励给学者一大笔财产。如果程序清单5.5运行的结果正确，这显然是跟统治者开了一个玩笑。程序计算出每个方格应放多少小麦，并计算了总数。可能大多数人对小麦的产量不熟悉，该程序以谷粒数为单位，把计算的小麦总数与粗略估计的世界小麦年产量进行了比较。</p>\n<p>程序清单5.5 wheat.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* wheat.c -- 指数增长 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> SQUARES 64　　　　　　 <span class=\"comment\">// 棋盘中的方格数</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">double</span> CROP = <span class=\"number\">2E16</span>;　<span class=\"comment\">// 世界小麦年产谷粒数</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> current,total;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> count=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"square　grains　total \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"fraction　of　\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"　　added　　grains　　 \"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"world　total\\n\"</span>);</span><br><span class=\"line\">    total=current=<span class=\"number\">1.0</span>;　　 <span class=\"comment\">/* 从1颗谷粒开始　*/</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%4d　%13.2e　%12.2e　%12.2e\\n\"</span>,count,　current,total,total/CROP);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(count&lt;SQUARES)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        count=count+<span class=\"number\">1</span>;</span><br><span class=\"line\">        current=<span class=\"number\">2.0</span>*current;　 <span class=\"comment\">/* 下一个方格谷粒翻倍 */</span></span><br><span class=\"line\">        total=total+current;　 <span class=\"comment\">/* 更新总数 */</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%4d　%13.2e　%12.2e　%12.2e\\n\"</span>,count,　current,total,total/CROP);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's　all.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序的输出结果如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">square　　　　　　grains　　　　　 total　　　　　　 fraction　of</span><br><span class=\"line\"></span><br><span class=\"line\">added　　　　　　 grains　　　　　 world　total</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span>　　　　　　　 <span class=\"number\">1.00e+00</span>　　　　<span class=\"number\">1.00e+00</span>　　　　<span class=\"number\">5.00e-17</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">2</span>　　　　　　　 <span class=\"number\">2.00e+00</span>　　　　<span class=\"number\">3.00e+00</span>　　　　<span class=\"number\">1.50e-16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">3</span>　　　　　　　 <span class=\"number\">4.00e+00</span>　　　　<span class=\"number\">7.00e+00</span>　　　　<span class=\"number\">3.50e-16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">4</span>　　　　　　　 <span class=\"number\">8.00e+00</span>　　　　<span class=\"number\">1.50e+01</span>　　　　<span class=\"number\">7.50e-16</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">5</span>　　　　　　　 <span class=\"number\">1.60e+01</span>　　　　<span class=\"number\">3.10e+01</span>　　　　<span class=\"number\">1.55e-15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">6</span>　　　　　　　 <span class=\"number\">3.20e+01</span>　　　　<span class=\"number\">6.30e+01</span>　　　　<span class=\"number\">3.15e-15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">7</span>　　　　　　　 <span class=\"number\">6.40e+01</span>　　　　<span class=\"number\">1.27e+02</span>　　　　<span class=\"number\">6.35e-15</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">8</span>　　　　　　　 <span class=\"number\">1.28e+02</span>　　　　<span class=\"number\">2.55e+02</span>　　　　<span class=\"number\">1.27e-14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">9</span>　　　　　　　 <span class=\"number\">2.56e+02</span>　　　　<span class=\"number\">5.11e+02</span>　　　　<span class=\"number\">2.55e-14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span>　　　　　　　<span class=\"number\">5.12e+02</span>　　　　<span class=\"number\">1.02e+03</span>　　　　<span class=\"number\">5.12e-14</span></span><br></pre></td></tr></table></figure><p>10个方格以后，该学者得到的小麦仅超过了1000粒。但是，看看55个方格的小麦数是多少：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">55</span>　　　　　 <span class=\"number\">1.80e+16</span>　　　　<span class=\"number\">3.60e+16</span>　　　　<span class=\"number\">1.80e+00</span></span><br></pre></td></tr></table></figure><p>总量已超过了世界年产量！不妨自己动手运行该程序，看看第64个方格有多少小麦。</p>\n<p>这个程序示例演示了指数增长的现象。世界人口增长和我们使用的能源都遵循相同的模式。</p>\n<h3 id=\"除法运算符：\">除法运算符：/<a href=\"#除法运算符：\" title=\"除法运算符：/\"></a></h3><p>C使用符号<code>/</code>来表示除法。<code>/</code>左侧的值是被除数，右侧的值是除数。例如，下面four的值是4.0：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">four = <span class=\"number\">12.0</span>/<span class=\"number\">3.0</span>;</span><br></pre></td></tr></table></figure><p>整数除法和浮点数除法不同。浮点数除法的结果是浮点数，而整数除法的结果是整数。整数是没有小数部分的数。这使得5除以3很让人头痛，因为实际结果有小数部分。在C语言中，整数除法结果的小数部分被丢弃，这一过程被称为截断（truncation）。</p>\n<p>运行程序清单5.6中的程序，看看截断的情况，体会整数除法和浮点数除法的区别。</p>\n<p>程序清单5.6 divide.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* divide.c -- 演示除法 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"integer　division:　5/4　is　%d　\\n\"</span>,<span class=\"number\">5</span>/<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"integer　division:　6/3　is　%d　\\n\"</span>,<span class=\"number\">6</span>/<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"integer　division:　7/4　is　%d　\\n\"</span>,<span class=\"number\">7</span>/<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"floating　division:　7./4. is　%1.2f　\\n\"</span>,</span><br><span class=\"line\"><span class=\"number\">7.</span>/<span class=\"number\">4.</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"mixed　division:　7./4　is　%1.2f　\\n\"</span>,<span class=\"number\">7.</span>/<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>程序清单5.6中包含一个“混合类型”的示例，即浮点值除以整型值。C相对其他一些语言而言，在类型管理上比较宽容。尽管如此，一般情况下还是要避免使用混合类型。该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">integer　division:　 <span class=\"number\">5</span>/<span class=\"number\">4</span>　　 is　<span class=\"number\">1</span></span><br><span class=\"line\">integer　division:　 <span class=\"number\">6</span>/<span class=\"number\">3</span>　　 is　<span class=\"number\">2</span></span><br><span class=\"line\">integer　division:　 <span class=\"number\">7</span>/<span class=\"number\">4</span>　　 is　<span class=\"number\">1</span></span><br><span class=\"line\">floating　division:　<span class=\"number\">7.</span>/<span class=\"number\">4.</span>　is　<span class=\"number\">1.75</span></span><br><span class=\"line\">mixed　division:　　　<span class=\"number\">7.</span>/<span class=\"number\">4</span>　 is　<span class=\"number\">1.75</span></span><br></pre></td></tr></table></figure><p>注意，<strong>整数除法会截断计算结果的小数部分</strong>（丢弃整个小数部分），不会四舍五入结果。混合整数和浮点数计算的结果是浮点数。实际上，计算机不能真正用浮点数除以整数，编译器会把两个运算对象转换成相同的类型。本例中，在进行除法运算前，整数会被转换成浮点数。</p>\n<p>C99标准以前，C语言给语言的实现者留有一些空间，让他们来决定如何进行负数的整数除法。一种方法是，舍入过程采用小于或等于浮点数的最大整数。当然，对于3.8而言，处理后的3符合这一描述。但是-3.8 会怎样？该方法建议四舍五入为-4，因为-4 小于-3.8.但是，另一种舍入方法是直接丢弃小数部分。这种方法被称为“<strong>趋零截断</strong>”，即把-3.8转换成-3。在C99以前，不同的实现采用不同的方法。但是C99规定使用趋零截断。所以，应把-3.8转换成-3。</p>\n<h3 id=\"运算符优先级\">运算符优先级<a href=\"#运算符优先级\" title=\"运算符优先级\"></a></h3><p>考虑下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">butter=<span class=\"number\">25.0</span>+<span class=\"number\">60.0</span>*n/SCALE;</span><br></pre></td></tr></table></figure><p>这条语句中有加法、乘法和除法运算。先算哪一个？是25.0加上60.0，然后把计算的和85.0乘以n，再把结果除以SCALE？还是60.0乘以n，然后把计算的结果加上25.0，最后再把结果除以SCALE？还是其他运算顺序？假设n是6.0，SCALE是2.0，带入语句中计算会发现，第1种顺序得到的结果是255，第2种顺序得到的结果是192.5。C程序一定是采用了其他的运算顺序，因为程序运行该语句后，butter的值是205.0。</p>\n<p>显然，执行各种操作的顺序很重要。C 语言对此有明确的规定，通过运算符优先级来解决操作顺序的问题。每个运算符都有自己的优先级。正如普通的算术运算那样，乘法和除法的优先级比加法和减法高，所以先执行乘法和除法。如果两个运算符的优先级相同怎么办？如果它们处理同一个运算对象，则根据它们在语句中出现的顺序来执行。对大多数运算符而言，这种情况都是按从左到右的顺序进行（=运算符除外）。因此，语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">butter=<span class=\"number\">25.0</span>+<span class=\"number\">60.0</span>*n/SCALE;</span><br></pre></td></tr></table></figure><p>的运算顺序是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">60.0</span>*n　　　　　<span class=\"comment\">/*首先计算表达式中的*或/（假设n的值是6，所以60.0*n得360.0）*/</span></span><br><span class=\"line\"><span class=\"number\">360.0</span>/SCALE　　 <span class=\"comment\">/*然后计算表达式中第2个*或*/</span></span><br><span class=\"line\"><span class=\"number\">25.0</span>+<span class=\"number\">180</span>　　　　　<span class=\"comment\">/*最后计算表达式里第1个+或-，结果为205.0（假设SCALE的值是2.0）</span></span><br></pre></td></tr></table></figure><p>许多人喜欢用表达式树（expression tree）来表示求值的顺序，如图5.3所示。该图演示了如何从最初的表达式逐步简化为一个值。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/用表达式树演示运算符运算对象和求值顺序.png\" class=\"φcy\"></p>\n<p>如何让加法运算在乘法运算之前执行？可以这样做：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flour=(<span class=\"number\">25.0</span>+<span class=\"number\">60.0</span>*n)/SCALE;</span><br></pre></td></tr></table></figure><p>最先执行圆括号中的部分。圆括号内部按正常的规则执行。该例中，先执行乘法运算，再执行加法运算。执行完圆括号内的表达式后，用运算结果除以SCALE。</p>\n<p>表5.1总结了到目前为止学过的运算符优先级。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/5.1运算符优先级.png\" class=\"φcy\"></p>\n<p>注意正号（加号）和负号（减号）的两种不同用法。结合律栏列出了运算符如何与运算对象结合。例如，一元负号与它右侧的量相结合，在除法中用除号左侧的运算对象除以右侧的运算对象。</p>\n<h3 id=\"优先级和求值顺序\">优先级和求值顺序<a href=\"#优先级和求值顺序\" title=\"优先级和求值顺序\"></a></h3><p>运算符优先级为表达式中的求值顺序提供重要的依据，但是并没有规定所有的顺序。C 给语言的实现者留出选择的余地。考虑下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">y=<span class=\"number\">6</span>*<span class=\"number\">12</span>+<span class=\"number\">5</span>*<span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure><p>当运算符共享一个运算对象时，优先级决定了求值顺序。例如上面的语句中，12是<em>和+运算符的运算对象。根据运算符的优先级，乘法的优先级比加法高，所以先进行乘法运算。类似地，先对 5 进行乘法运算而不是加法运算。简而言之，先进行两个乘法运算6 * 12和5 * 20，再进行加法运算。但是，优先级并未规定到底先进行哪一个乘法。C 语言把主动权留给语言的实现者，根据不同的硬件来决定先计算前者还是后者。可能在一种硬件上采用某种方案效率更高，而在另一种硬件上采用另一种方案效率更高。无论采用哪种方案，表达式都会简化为 72 + 100，所以这并不影响最终的结果。但是，读者可能会根据乘法从左往右的结合律，认为应该先执行+运算符左边的乘法。结合律只适用于共享同一运算对象运算符。例如，在表达式12 / 3 * 2中，/和</em>运算符的优先级相同，共享运算对象3。因此，从左往右的结合律在这种情况起作用。表达式简化为4 * 2，即8（如果从右往左计算，会得到12/6，即2，这种情况下计算的先后顺序会影响最终的计算结果）。在该例中，两个*运算符并没有共享同一个运算对象，因此从左往右的结合律不适用于这种情况。</p>\n<p>学以致用</p>\n<p>接下来，我们在更复杂的示例中使用以上规则，请看程序清单5.7。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">5.7</span> rules.c程序</span><br><span class=\"line\"><span class=\"comment\">/* rules.c -- 优先级测试 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>　top,　score;</span><br><span class=\"line\">    top = score = -(<span class=\"number\">2</span> + <span class=\"number\">5</span>) * <span class=\"number\">6</span> + (<span class=\"number\">4</span> + <span class=\"number\">3</span> * (<span class=\"number\">2</span> + <span class=\"number\">3</span>));</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"top　=　%d,　score　=　%d\\n\"</span>,　top,　score);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序会打印什么值？先根据代码推测一下，再运行程序或阅读下面的分析来检查你的答案。</p>\n<p>首先，圆括号的优先级最高。先计算-(2 + 5) * 6中的圆括号部分，还是先计算(4 + 3 * (2 + 3))中的圆括号部分取决于具体的实现。圆括号的最高优先级意味着，在子表达式-(2 + 5) * 6中，先计算(2 + 5)的值，得7。然后，把一元负号应用在7上，得-7。现在，表达式是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = score = <span class=\"number\">-7</span> * <span class=\"number\">6</span> + (<span class=\"number\">4</span> + <span class=\"number\">3</span> * (<span class=\"number\">2</span> + <span class=\"number\">3</span>))</span><br></pre></td></tr></table></figure><p>下一步，计算2 + 3的值。表达式变成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = score = <span class=\"number\">-7</span> * <span class=\"number\">6</span> + (<span class=\"number\">4</span> + <span class=\"number\">3</span> * <span class=\"number\">5</span>)</span><br></pre></td></tr></table></figure><p>接下来，因为圆括号中的*比+优先级高，所以表达式变成：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = score = <span class=\"number\">-7</span> * <span class=\"number\">6</span> + (<span class=\"number\">4</span> + <span class=\"number\">15</span>)</span><br></pre></td></tr></table></figure><p>然后，表达式为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = score = <span class=\"number\">-7</span> * <span class=\"number\">6</span> + <span class=\"number\">19</span></span><br></pre></td></tr></table></figure><p>-7乘以6后，得到下面的表达式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = score = <span class=\"number\">-42</span> + <span class=\"number\">19</span></span><br></pre></td></tr></table></figure><p>然后进行加法运算，得到：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top = score = <span class=\"number\">-23</span></span><br></pre></td></tr></table></figure><p>现在，-23被赋值给score，最终top的值也是-23。记住，=运算符的结合律是从右往左。</p>\n<h2 id=\"其他运算符\">其他运算符<a href=\"#其他运算符\" title=\"其他运算符\"></a></h2><p>C语言有大约40个运算符，有些运算符比其他运算符常用得多。前面讨论的是最常用的，本节再介绍4个比较有用的运算符。</p>\n<h3 id=\"sizeof运算符和size_t类型\">sizeof运算符和size_t类型<a href=\"#sizeof运算符和size_t类型\" title=\"sizeof运算符和size_t类型\"></a></h3><p>读者在第3章就见过<code>sizeof</code>运算符。回顾一下，<code>sizeof</code>运算符以字节为单位返回运算对象的大小（在C中，1字节定义为<code>char</code>类型占用的空间大小。过去，1字节通常是8位，但是一些字符集可能使用更大的字节）。运算对象可以是具体的数据对象（如，变量名）或类型。如果运算对象是类型（如，<code>float</code>），则必须用圆括号将其括起来。程序清单5.8演示了这两种用法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">5.8</span> <span class=\"keyword\">sizeof</span>.c程序</span><br><span class=\"line\"><span class=\"comment\">// sizeof.c -- 使用sizeof运算符</span></span><br><span class=\"line\"><span class=\"comment\">// 使用C99新增的%zd转换说明 -- 如果编译器不支持%zd，请将其改成%u或%lu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span>　n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">size_t</span> intsize;</span><br><span class=\"line\">    intsize=<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"n=%d,　n　has　%zd　bytes;　all　ints　have　%zd　bytes.\\n\"</span>,</span><br><span class=\"line\">n,<span class=\"keyword\">sizeof</span>　n,intsize);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>C 语言规定，<code>sizeof</code> 返回 <code>size_t</code> 类型的值。这是一个无符号整数类型，但它不是新类型。前面介绍过，<code>size_t</code>是语言定义的标准类型。C有一个<code>typedef</code>机制（第14章再详细介绍），允许程序员为现有类型创建别名。例如，</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">double</span> real;</span><br></pre></td></tr></table></figure><p>这样，real就是double的别名。现在，可以声明一个real类型的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">real deal; <span class=\"comment\">// 使用typedef</span></span><br></pre></td></tr></table></figure><p>编译器查看<code>real</code>时会发现，在typedef声明中<code>real</code>已成为<code>double</code>的别名，于是把<code>dea</code>l创建为<code>double</code> 类型的变量。类似地，<mark>C 头文件系统可以使用 <code>typedef</code> 把 <code>size_t</code> 作为 <code>unsigned int</code> 或<code>unsigned long</code>的别名</mark>。这样，在使用<code>size_t</code>类型时，编译器会根据不同的系统替换标准类型。</p>\n<p>C99 做了进一步调整，新增了<code>%zd</code> 转换说明用于 <code>printf()</code>显示 <code>size_t</code> 类型的值。如果系统不支持<code>%zd</code>，可使用<code>%u</code>或<code>%lu</code>代替<code>%zd</code>。</p>\n<h3 id=\"求模运算符：\">求模运算符：%<a href=\"#求模运算符：\" title=\"求模运算符：%\"></a></h3><p>求模运算符（modulus operator）用于整数运算。求模运算符给出其左侧整数除以右侧整数的余数（remainder）。例如，13 % 5（读作“13求模5”）得3，因为13比5的两倍多3，即13除以5的余数是3。求模运算符只能用于整数，不能用于浮点数。</p>\n<p>乍一看会认为求模运算符像是数学家使用的深奥符号，但是实际上它非常有用。求模运算符常用于控制程序流。例如，假设你正在设计一个账单预算程序，每 3 个月要加进一笔额外的费用。这种情况可以在程序中对月份求模3（即，month % 3），并检查结果是否为0。如果为0，便加进额外的费用。等学到第7章的if语句后，读者会更明白。</p>\n<p>程序清单5.9演示了%运算符的另一种用途。同时，该程序也演示了while循环的另一种用法。</p>\n<p>程序清单5.9 min_sec.c程序</p>\n<p>// min_sec.c – 把秒数转换成分和秒</p>\n<p>#include　&lt;stdio.h&gt;</p>\n<p>#define SEC_PER_MIN 60　　　　　 // 1分钟60秒</p>\n<p>int　main(void)</p>\n<p>{</p>\n<p>int　sec,　min,　left;</p>\n<p>printf(“Convert　seconds　to　minutes　and　seconds!\\n”);</p>\n<p>printf(“Enter　the　number　of　seconds　(&lt;=0　to　quit):\\n”);</p>\n<p>scanf(“%d”, &amp;sec);　　　　　 // 读取秒数</p>\n<p>while　(sec　&gt;　0)</p>\n<p>{</p>\n<p>min = sec / SEC_PER_MIN;　　// 截断分钟数</p>\n<p>left = sec % SEC_PER_MIN;　 // 剩下的秒数</p>\n<p>printf(“%d　seconds　is　%d　minutes,　%d　seconds.\\n”,　sec,</p>\n<p>min,　left);</p>\n","next":{"title":"string.h中常用函数","link":"posts/52078792"},"plink":"https://dxsummer.gitee.io/posts/d0061c8b/","toc":[{"id":"运算符、表达式和语句","title":"[运算符、表达式和语句]","index":"1","children":[{"id":"循环简介","title":"循环简介","index":"1.1"},{"id":"基本运算符","title":"基本运算符","index":"1.2","children":[{"id":"赋值运算符：","title":"赋值运算符：&#x3D;","index":"1.2.1"},{"id":"加法运算符：","title":"加法运算符：+","index":"1.2.2"},{"id":"减法运算符：-","title":"减法运算符：-","index":"1.2.3"},{"id":"符号运算符：-和","title":"符号运算符：-和+","index":"1.2.4"},{"id":"乘法运算符：","title":"乘法运算符：*","index":"1.2.5","children":[{"id":"指数增长","title":"指数增长","index":"1.2.5.1"}]},{"id":"除法运算符：","title":"除法运算符：&#x2F;","index":"1.2.6"},{"id":"运算符优先级","title":"运算符优先级","index":"1.2.7"},{"id":"优先级和求值顺序","title":"优先级和求值顺序","index":"1.2.8"}]},{"id":"其他运算符","title":"其他运算符","index":"1.3","children":[{"id":"sizeof运算符和size_t类型","title":"sizeof运算符和size_t类型","index":"1.3.1"},{"id":"求模运算符：","title":"求模运算符：%","index":"1.3.2"}]}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/d0061c8b/\" title=\"运算符、表达式和语句\">https://dxsummer.gitee.io/posts/d0061c8b/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年5月30日","updated":"2020年6月1日"}}