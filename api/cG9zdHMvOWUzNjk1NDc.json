{"title":"Step9 字符串和字符串函数","date":"2020-06-27T06:47:03.000Z","date_formatted":{"ll":"2020年6月27日","L":"2020/06/27","MM-DD":"06-27"},"thumbnail":"https://gitee.com/DxSummer/pic/raw/master/img/c/Step9fengmian.jpg","link":"posts/9e369547","comments":true,"tags":["C语言基础"],"updated":"2020-06-27T07:05:13.254Z","content":"<h2 id=\"字符串和字符串函数\">字符串和字符串函数<a href=\"#字符串和字符串函数\" title=\"字符串和字符串函数\"></a></h2><p>本章介绍以下内容：</p>\n<p><strong>函数</strong>：<code>gets()</code>、<code>gets_s()</code>、<code>fgets()</code>、<code>puts()</code>、<code>fputs()</code>、<code>strcat()</code>、<code>strncat()</code>、<code>strcmp()</code>、<code>strncmp()</code>、<code>strcpy()</code>、<code>strncpy()</code>、<code>sprintf()</code>、<code>strchr()</code></p>\n<p><strong>创建并使用字符串</strong></p>\n<p><strong>使用C库中的字符和字符串函数，并创建自定义的字符串函数</strong></p>\n<p><strong>使用命令行参数</strong></p>\n<p>字符串是C语言中最有用、最重要的数据类型之一。虽然我们一直在使用字符串，但是要学的东西还很多。C 库提供大量的函数用于读写字符串、拷贝字符串、比较字符串、合并字符串、查找字符串等。通过本章的学习，读者将进一步提高自己的编程水平。</p>\n<h2 id=\"表示字符串和字符串io\">表示字符串和字符串I/O<a href=\"#表示字符串和字符串io\" title=\"表示字符串和字符串I/O\"></a></h2><p>第4章介绍过，字符串是以空字符（<code>\\0</code>）结尾的<code>char</code>类型数组。因此，可以把上一章学到的数组和指针的知识应用于字符串。不过，由于字符串十分常用，所以 C提供了许多专门用于处理字符串的函数。本章将讨论字符串的性质、如何声明并初始化字符串、如何在程序中输入和输出字符串，以及如何操控字符串。</p>\n<p>程序清单11.1演示了在程序中表示字符串的几种方式。</p>\n<p>程序清单11.1 strings1.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//　 strings1.c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　MSG　<span class=\"meta-string\">\"I　am　a　symbolic　string　constant.\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span>　MAXLENGTH　81</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>　words[MAXLENGTH]　=　<span class=\"string\">\"I　am　a　string　in　an　array.\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span> * pt1 = <span class=\"string\">\"Something is pointing at me.\"</span>;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">\"Here　are　some　strings:\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(MSG);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(words);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(pt1);</span><br><span class=\"line\">    words[<span class=\"number\">8</span>]　=　<span class=\"string\">'p'</span>;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(words);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>和printf()函数一样，puts()函数也属于stdio.h系列的输入/输出函数。但是，与printf()不同的是，puts()函数只显示字符串，而且自动在显示的字符串末尾加上换行符。下面是该程序的输出：</p>\n<p>Here　are　some　strings:</p>\n<p>I　am　an　old-fashioned　symbolic　string　constant.</p>\n<p>I　am　a　string　in　an　array.</p>\n<p>Something　is　pointing　at　me.</p>\n<p>I　am　a　spring　in　an　array.</p>\n<p>我们先分析一下该程序中定义字符串的几种方法，然后再讲解把字符串读入程序涉及的一些操作，最后学习如何输出字符串。</p>\n<h3 id=\"1111-在程序中定义字符串\"><a href=\"part0000.xhtml#toc296\">11.1.1 在程序中定义字符串</a><a href=\"#1111-在程序中定义字符串\" title=\"11.1.1 在程序中定义字符串\"></a></h3><p>程序清单11.1中使用了多种方法（即字符串常量、char类型数组、指向char的指针）定义字符串。程序应该确保有足够的空间储存字符串，这一点我们稍后讨论。</p>\n<p>1.字符串字面量（字符串常量）</p>\n<p>用双引号括起来的内容称为字符串字面量（string literal），也叫作字符串常量（string constant）。双引号中的字符和编译器自动加入末尾的\\0字符，都作为字符串储存在内存中，所以”I am a symbolic stringconstant.”、”I am a string in an array.”、”Something is pointed at me.”、”Here are some strings:”都是字符串字面量。</p>\n<p>从ANSI C标准起，如果字符串字面量之间没有间隔，或者用空白字符分隔，C会将其视为串联起来的字符串字面量。例如：</p>\n<p>char　greeting[50]　=　“Hello,　and””　how　are”　“　you”</p>\n<p>“　today!”;</p>\n<p>与下面的代码等价：</p>\n<p>char greeting[50] = “Hello, and how are you today!”;</p>\n<p>如果要在字符串内部使用双引号，必须在双引号前面加上一个反斜杠（\\）：</p>\n","prev":{"title":"Step 3　该如何使用进阶的句子？","link":"posts/1b9f695a"},"next":{"title":"台儿庄之旅","link":"posts/1dc37cc8"},"plink":"https://dxsummer.gitee.io/posts/9e369547/","toc":[{"id":"字符串和字符串函数","title":"字符串和字符串函数","index":"1"},{"id":"表示字符串和字符串io","title":"表示字符串和字符串I&#x2F;O","index":"2","children":[{"id":"1111-在程序中定义字符串","title":"11.1.1 在程序中定义字符串","index":"2.1"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/9e369547/\" title=\"Step9 字符串和字符串函数\">https://dxsummer.gitee.io/posts/9e369547/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年6月27日","updated":"2020年6月27日"}}