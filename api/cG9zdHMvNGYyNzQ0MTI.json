{"title":"C语言菜鸟笔记","date":"2020-04-23T05:18:11.000Z","date_formatted":{"ll":"2020年4月23日","L":"2020/04/23","MM-DD":"04-23"},"link":"posts/4f274412","comments":true,"tags":["C语言菜鸟笔记"],"categories":["C语言","笔记"],"updated":"2020-06-02T10:02:30.388Z","content":"<p class='div-border yellow left right'>此帖记录C语言学习笔记，整合从最初学习C语言遇到的问题到一步步成长</p><h2 id=\"c-语言中-main、void-main-和-int-mainvoid-有什么区别？\">C 语言中 main()、void main() 和 int main(void) 有什么区别？<a href=\"#c-语言中-main、void-main-和-int-mainvoid-有什么区别？\" title=\"C 语言中 main()、void main() 和 int main(void) 有什么区别？\"></a></h2><ol><li><p><code>main()</code>是K&amp;R C的语法，也就是C89，现在可以使用，但是不推荐。<br><code>int main(void)</code>是c99的语法。<br><code>void main()</code>不是任何标准定义的，根据维基百科 C语言 的说法，这个是微软自己定义的。</p>\n</li>\n<li><p><code>int main(void)</code>表示返回一个整数值，不接收任何参数。<br><code>main()</code>按照老的C语言标准，不写返回值的函数默认返回类型为整形。空的括号表示可以接收任意个数任意类型的参数。</p>\n</li>\n<li><p><code>void main()</code> 的空括号表示可以接收任意个数任意类型的参数。<mark>在一般函数里void表示没有返回值</mark>。但是这个在main函数里面有点特殊,按照C99标准的5.1.2.2.3节描述，程序依然会返回一个unspecified的值。(实际上这一节的内容也隐喻了main函数可以不是<code>int main(void)</code>的形式)</p>\n</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pound</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span></span></span><br></pre></td></tr></table></figure><p><mark><strong>如果函数不接受任何参数，函数头的圆括号中应该写上关键字 void</strong></mark>。由于该函数接受一个 <code>int</code> 类型的参数，所以圆括号中包含一个<code>int</code>类型变量<code>n</code>的声明。</p>\n</li>\n</ol><h2 id=\"数据\">数据<a href=\"#数据\" title=\"数据\"></a></h2><h3 id=\"c-标识符只能由字母下划线和数字组成-且不能以数字开头。\">C 标识符只能由字母.下划线和数字组成 且不能以数字开头。<a href=\"#c-标识符只能由字母下划线和数字组成-且不能以数字开头。\" title=\"C 标识符只能由字母.下划线和数字组成 且不能以数字开头。\"></a></h3><h3 id=\"int常量是求不大于括号内数字-的最大整数\">int(常量)是求不大于括号内数字 的最大整数<a href=\"#int常量是求不大于括号内数字-的最大整数\" title=\"int(常量)是求不大于括号内数字 的最大整数\"></a></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>(<span class=\"number\">3.5</span>)=<span class=\"number\">3</span></span><br></pre></td></tr></table></figure><h3 id=\"float在计算机中存储类型默认为double精度\">float在计算机中存储类型默认为double精度<a href=\"#float在计算机中存储类型默认为double精度\" title=\"float在计算机中存储类型默认为double精度\"></a></h3><ol><li><p><code>char</code>为1字符，8位</p>\n<p><code>short</code> 2字节 16位</p>\n<p><code>short int</code> 2字节 16位 输出格式：<code>%hd</code></p>\n<p><code>int</code>为2字符或4字符，16位或32位</p>\n<p><code>float</code>实际为4字符，即32位,C语言，<code>float</code>类型值会被自动转换成<code>double</code>类型,即64位</p>\n<p><code>long</code>浮点数要占用4字节，32位</p>\n<p><code>double</code> 八字节，64位</p>\n<p><code>long long</code> 八字节，64位</p>\n<p><code>long double</code> 十六位，128位</p>\n</li>\n<li><p>默认情况下，<mark>编译器假定<strong>浮点型float</strong>常量是<code>double</code>类型的精度</mark>。例如，假设some是float类型的变量，编写下面的语句：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">some = <span class=\"number\">4.0</span> * <span class=\"number\">2.0</span>;</span><br></pre></td></tr></table></figure><p> 通常，4.0和2.0被储存为64位的<code>double</code>类型，使用双精度进行乘法运算，然后将乘积截断成float类型的宽度。这样做虽然计算精度更高，但是会减慢程序的运行速度。</p>\n</li>\n<li><p><strong>在浮点数后面加上<code>f</code>或<code>F</code>后缀可覆盖默认设置</strong>，编译器会将浮点型常量看作<code>float</code>类型，如<code>2.3f</code>和<code>9.11E9F</code>。使用<code>l</code>或<code>L</code>后缀使得数字成为<code>long double</code>类型，如<code>54.3l</code>和<code>4.32L</code>。注意，建议使用<code>L</code>后缀，因为字母<code>l</code>和数字<code>1</code>很容易混淆。<mark>没有后缀的浮点型常量是<code>double</code>类型。</mark></p>\n</li>\n<li><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Type <span class=\"keyword\">int</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">4</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">char</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">1</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">long</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">4</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">8</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">double</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">8</span> bytes.</span><br><span class=\"line\">Type <span class=\"keyword\">long</span> <span class=\"keyword\">double</span> has a <span class=\"built_in\">size</span> of <span class=\"number\">16</span> bytes.</span><br></pre></td></tr></table></figure></li>\n</ol><h3 id=\"float\">float<a href=\"#float\" title=\"float\"></a></h3><p><strong>float类型的数字通常只能储存按指数比例缩小或放大的6或7位有效数字。</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* floaterr.c--演示舍入错误 */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">float</span>　a,b;</span><br><span class=\"line\">    b　=　<span class=\"number\">2.0e20</span>　+　<span class=\"number\">1.0</span>;</span><br><span class=\"line\">    a　=　b　-　<span class=\"number\">2.0e20</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%f　\\n\"</span>,　a);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下<br><img src=\"https://i.loli.net/2020/04/24/pIM1fPDzQNqRJa9.jpg\" class=\"φcy\"></p>\n<p>得出这些奇怪答案的原因是，计算机缺少足够的小数位来完成正确的运算。2.0e20是 2后面有20个0。如果把该数加1，那么发生变化的是第21位。要正确运算，程序至少要储存21位数字。而float类型的数字通常只能储存按指数比例缩小或放大的6或7位有效数字。在这种情况下，计算结果一定是错误的。另一方面，如果把2.0e20改成2.0e4，计算结果就没问题。因为2.0e4加1只需改变第5位上的数字，float类型的精度足够进行这样的计算。</p>\n<h3 id=\"字符串常量\">字符串常量<a href=\"#字符串常量\" title=\"字符串常量\"></a></h3><p>用双引号(<code>“”</code>)括起来的0个或者多个字符组成的序列存储：每个字符串尾自动加一个 ‘<code>\\0</code>’ 作为字符串结束标志</p>\n<p>字符串常量是百一对双引号括起来的字符序列。字符常量可以赋值给字符变量，如<code>char b=&#39;a&#39;;</code>,但不能把一个字符串常量赋给一个字符变量，同时也不能对字符串常量赋值。</p>\n<h2 id=\"格式化输入\">格式化输入<a href=\"#格式化输入\" title=\"格式化输入\"></a></h2><h3 id=\"字符串s\">字符串%s<a href=\"#字符串s\" title=\"字符串%s\"></a></h3><p>如果使用<code>%s</code> 转换说明，<code>scanf()</code>会读取除空白以外的所有字符。<code>scanf()</code><strong>跳过空白开始读取第 1 个非空白字符</strong>，并保存非空白字符直到再次遇到空白。这意味着 <code>scanf()</code>根据<code>%s</code> 转换说明读取一个单词，即不包含空白字符的字符串</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%s\"</span>,s);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"\\n输出%s\"</span>,s);</span><br></pre></td></tr></table></figure><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出</span><br><span class=\"line\">abc123 <span class=\"number\">123</span></span><br><span class=\"line\">输出abc123</span><br></pre></td></tr></table></figure><h2 id=\"格式输出符\">格式输出符<a href=\"#格式输出符\" title=\"格式输出符\"></a></h2><h3 id=\"hu-hd\">%hu hd<a href=\"#hu-hd\" title=\"%hu hd\"></a></h3><ul><li><p><code>%hd</code>表示短整数(short int)。</p>\n</li>\n<li><p><code>%hu</code>用于输出一个<code>unsigned short int</code>类型的数值百，此类型占两个字节，度范围问为0到65535（2^16-1）</p>\n</li>\n<li><p><mark><code>%hhu</code>用于输出一个<code>unsigned short</code>类型答的数值</mark>，此类型占一个字节，范围为0到255（2^8-1）</p>\n</li>\n</ul><h3 id=\"mne、e\">%m.ne、%e<a href=\"#mne、e\" title=\"%m.ne、%e\"></a></h3><p><code>%e</code>是按指数的形式输出，比如 <code>4.22e5</code></p>\n<p><code>e</code>表示10的N次方，5.2 长度为5，小数点精确度为2，这个本身和复<code>%e</code>没有关系，C语言的输出就是标准就这样。</p>\n<p><code>%hd</code>：<code>short int</code> 16位</p>\n<p>详细点的说明就是 <code>%m.ne</code> 指定输出的数值共占m位，其中有n位小数制。<mark>若数值长度小于m，则左端补空格。若数值长度大于m，则按实际数值输出，小数位保留n位。</mark></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\">main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">float</span> i=<span class=\"number\">1777777</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%3.2f\"</span>,i);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1777777.00</span></span><br></pre></td></tr></table></figure><p>这是<code>ptintf()</code>的格式。</p>\n<p><img src=\"https://i.loli.net/2020/05/09/9Ad3hVP7aYZS4ix.png\" class=\"φcy\"><br><img src=\"https://i.loli.net/2020/05/09/EUbTfNxDqXnWJSZ.jpg\" class=\"φcy\"></p>\n<h3 id=\"带格式输出-x\">带格式输出 %#x<a href=\"#带格式输出-x\" title=\"带格式输出 %#x\"></a></h3><ol><li><p><code>%#x</code>是带格<code>zd</code>式输出, 效果为在输出前加<code>0x</code>.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%x %X %#x\\n\"</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>);</span><br></pre></td></tr></table></figure><p> 输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1f</span> <span class=\"number\">1F</span> <span class=\"number\">0x1f</span></span><br></pre></td></tr></table></figure><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    </span><br><span class=\"line\">2. 输出演示了如何在整型格式中使用精度（%5.3d）生成足够的前导0以满足最小位数的要求（本例是3）。然而，使用0标记会使得编译器用前导0填充满整个字段宽度。最后，如果0标记和精度一起出现，0标记会被忽略。</span><br></pre></td></tr></table></figure><p> printf(“<strong>%5d</strong>%5.3d<strong>%05d</strong>%05.3d**\\n”, 6, 6, 6, 6);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输出：</span><br></pre></td></tr></table></figure><p> **　 6** 006<strong>00006</strong> 006**</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### strlen()和 sizeof()的区别</span><br><span class=\"line\"></span><br><span class=\"line\">C语言中没有字符串类型，字符串在内存中是用字符数组表示的。</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;strlen( )&#96;：&#96;strlen( )&#96;求得的是字符串的长度 &#96;%u&#96;、&#96;%lu&#96;、&#96;%zd&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;sizeof( )&#96;：&#96;sizeof( )&#96;计算字符串占的总内存空间 &#96;%u&#96;、&#96;%lu&#96;、&#96;%zd&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">例如字符串</span><br></pre></td></tr></table></figure><p>str[20]= {“abcdef”};</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#96;strlen(str)&#96;,结果为6</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;sizeof(str)&#96;,结果为20</span><br><span class=\"line\"></span><br><span class=\"line\">### printf()和scanf()的*修饰符 &#96;% *d&#96;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;mark&gt;如果转换说明是&#96;%*d&#96;，那么参数列表中应包含&#96;*&#96;和 &#96;d&#96;对应的值&lt;&#x2F;mark&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; **例一 printf()**</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;c</span><br><span class=\"line\">scanf(&quot;%d&quot;, &amp;width);</span><br><span class=\"line\">printf(&quot;The number is :%*d:\\n&quot;, width, number);</span><br></pre></td></tr></table></figure><p>输出</p>\n</li>\n</ol><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">6</span></span><br><span class=\"line\">The number is : <span class=\"number\">256</span>:</span><br></pre></td></tr></table></figure><blockquote>\n<p><strong>例二 printf()</strong></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d %d\"</span>, &amp;<span class=\"built_in\">width</span>, &amp;precision);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Weight = %*.*f\\n\"</span>, <span class=\"built_in\">width</span>, precision, weight);</span><br></pre></td></tr></table></figure><p>输出</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">8</span> <span class=\"number\">3</span></span><br><span class=\"line\">Weight = <span class=\"number\">242.500</span></span><br></pre></td></tr></table></figure><blockquote>\n<p><strong>例三 scanf()</strong></p>\n</blockquote>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">\"%*d %*d %d\"</span>, &amp;n);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"The last integer was %d\\n\"</span>, n);</span><br></pre></td></tr></table></figure><p><code>scanf()</code>指示：跳过两个整数，把第3个整数拷贝给n。下面是一个运行示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2013</span> <span class=\"number\">2014</span> <span class=\"number\">2015</span></span><br><span class=\"line\">The last integer was <span class=\"number\">2015</span></span><br></pre></td></tr></table></figure><p>在程序需要读取文件中特定列的内容时，这项跳过功能很有用。</p>\n","prev":{"title":"英语笔记","link":"posts/4e70975"},"next":{"title":"加油吧！少年——社会还在逼他们继续奋斗","link":"posts/ca5d3c1d"},"plink":"https://dxsummer.gitee.io/posts/4f274412/","toc":[{"id":"c-语言中-main、void-main-和-int-mainvoid-有什么区别？","title":"C 语言中 main()、void main() 和 int main(void) 有什么区别？","index":"1"},{"id":"数据","title":"数据","index":"2","children":[{"id":"c-标识符只能由字母下划线和数字组成-且不能以数字开头。","title":"C 标识符只能由字母.下划线和数字组成 且不能以数字开头。","index":"2.1"},{"id":"int常量是求不大于括号内数字-的最大整数","title":"int(常量)是求不大于括号内数字 的最大整数","index":"2.2"},{"id":"float在计算机中存储类型默认为double精度","title":"float在计算机中存储类型默认为double精度","index":"2.3"},{"id":"float","title":"float","index":"2.4"},{"id":"字符串常量","title":"字符串常量","index":"2.5"}]},{"id":"格式化输入","title":"格式化输入","index":"3","children":[{"id":"字符串s","title":"字符串%s","index":"3.1"}]},{"id":"格式输出符","title":"格式输出符","index":"4","children":[{"id":"hu-hd","title":"%hu hd","index":"4.1"},{"id":"mne、e","title":"%m.ne、%e","index":"4.2"},{"id":"带格式输出-x","title":"带格式输出 %#x","index":"4.3"}]}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/4f274412/\" title=\"C语言菜鸟笔记\">https://dxsummer.gitee.io/posts/4f274412/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年4月23日","updated":"2020年6月2日"}}