{"title":"C控制语句：循环","date":"2020-06-03T04:33:48.000Z","date_formatted":{"ll":"2020年6月3日","L":"2020/06/03","MM-DD":"06-03"},"link":"posts/287f677b","comments":true,"tags":["C控制语句：循环"],"categories":["C语言"],"updated":"2020-06-03T13:51:33.458Z","content":"<h2 id=\"c控制语句：循环\">C控制语句：循环<a href=\"#c控制语句：循环\" title=\"C控制语句：循环\"></a></h2><p>本章介绍以下内容：</p>\n<p>关键字：<code>for</code>、<code>while</code>、<code>do while</code></p>\n<p>运算符：<code>&lt;</code>、<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、<code>!=</code>、<code>==</code>、<code>+=</code>、<code>*=</code>、<code>-=</code>、<code>/=</code>、<code>%=</code></p>\n<p>函数：<code>fabs()</code></p>\n<p>C语言有3种循环：<code>for</code>、<code>while</code>、<code>do while</code></p>\n<p>使用关系运算符构建控制循环的表达式</p>\n<p>其他运算符</p>\n<p>循环常用的数组</p>\n<p>编写有返回值的函数</p>\n<p>大多数人都希望自己是体格强健、天资聪颖、多才多艺的能人。虽然有时事与愿违，但至少我们用 C能写出这样的程序。诀窍是控制程序流。对于计算机科学（是研究计算机，不是用计算机做研究）而言，一门语言应该提供以下3种形式的程序流：</p>\n<p>执行语句序列；</p>\n<p>如果满足某些条件就重复执行语句序列（循环通过测试选择执行哪一个语句序列（分支）。</p>\n<p>读者对第一种形式应该很熟悉，前面学过的程序中大部分都是由语句序列组成。<code>while</code>循环属于第二种形式。本章将详细讲解<code>while</code>循环和其他两种循环：<code>for</code>和<code>do while</code>。第三种形式用于在不同的执行方案之间进行选择，让程序更“智能”，且极大地提高了计算机的用途。不过，要等到下一章才介绍这部分的内容。本章还将介绍数组，可以把新学的知识应用在数组上。另外，本章还将继续介绍函数的相关内容。首先，我们从<code>while</code>循环开始学习。</p>\n<h2 id=\"再探while循环\">再探while循环<a href=\"#再探while循环\" title=\"再探while循环\"></a></h2><p>经过上一章的学习，读者已经熟悉了 <code>while</code> 循环。这里，我们用一个程序来回顾一下，程序清单 6.1根据用户从键盘输入的整数进行求和。程序利用了<code>scanf()</code>的返回值来结束循环。</p>\n<p>程序清单6.1 summing.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* summing.c -- 根据用户键入的整数求和 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum=<span class=\"number\">0L</span>;　　　　 <span class=\"comment\">/* 把sum初始化为0　*/</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　an　integer　to　be　summed　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"(q　to　quit):　\"</span>);</span><br><span class=\"line\">    status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (status == <span class=\"number\">1</span>)　　<span class=\"comment\">/* == 的意思是“等于”　*/</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum=sum+num;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　next　integer　(q　to　quit):　\"</span>);</span><br><span class=\"line\">        status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Those　integers　sum　to　%ld.\\n\"</span>,　sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序使用<code>long</code>类型以储存更大的整数。尽管C编译器会把0自动转换为合适的类型，但是为了保持程序的一致性，我们把<code>sum</code>初始化为<code>0L</code>（<code>long</code>类型的0），而不是<code>0</code>（<code>int</code>类型的0）。</p>\n<p>该程序的运行示例如下：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Please　enter　an　integer　to　be　<span class=\"title\">summed</span>　<span class=\"params\">(q　to　quit)</span>:　44</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　33</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　88</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　121</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　q</span></span><br><span class=\"line\">Those　integers　sum　to　286.</span><br></pre></td></tr></table></figure><h3 id=\"程序注释\">程序注释<a href=\"#程序注释\" title=\"程序注释\"></a></h3><p>先看<code>while</code>循环，该循环的测试条件是如下表达式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status==<span class=\"number\">1</span></span><br></pre></td></tr></table></figure><p><code>==</code>运算符是C的相等运算符（equality operator），该表达式判断<code>status</code>是否等于1。不要把<code>status== 1</code>与<code>status = 1</code>混淆，后者是把1赋给status。根据测试条件<code>status == 1</code>，只要status等于1，循环就会重复。每次循环，num的当前值都被加到sum上，这样sum的值始终是当前整数之和。当status的值不为1时，循环结束。然后程序打印sum的最终值。</p>\n<p>要让程序正常运行，每次循环都要获取<code>num</code>的一个新值，并重置<code>status</code>。程序利用<code>scanf()</code>的两个不同的特性来完成。首先，使用<code>scanf()</code>读取<code>num</code>的一个新值；然后，检查<code>scanf()</code>的返回值判断是否成功获取值。第4章中介绍过，<mark><code>scanf()</code>返回成功读取项的数量</mark>。如果<code>scanf()</code>成功读取一个整数，就把该数存入<code>num</code>并返回1，随后返回值将被赋给<code>status</code>（注意，用户输入的值储存在num中，不是status中）。这样做同时更新了num和status的值，<code>while</code>循环进入下一次迭代。如果用户输入的不是数字（如， q），<code>scanf()</code>会读取失败并返回0。此时，<code>status</code>的值就是0，循环结束。因为输入的字符q不是数字，所以它会被放回输入队列中（实际上，不仅仅是 q，任何非数值的数据都会导致循环终止，但是提示用户输入q退出程序比提示用户输入一个非数字字符要简单）。</p>\n<p>如果 <code>scanf()</code>在转换值之前出了问题（例如，检测到文件结尾或遇到硬件问题），会返回一个特殊值<code>EOF</code>（其值通常被定义为<code>-1</code>）。这个值也会引起循环终止。</p>\n<p>如何告诉循环何时停止？该程序利用 <code>scanf()</code>的双重特性避免了在循环中交互输入时的这个棘手的问题。例如，假设<code>scanf()</code>没有返回值，那么每次循环只会改变<code>num</code>的值。虽然可以使用<code>num</code>的值来结束循环，比如把<code>num &gt; 0</code>（num大于0）或<code>num ！= 0</code>（num不等于0）作为测试条件，但是这样用户就不能输入某些值，如-3或0。也可以在循环中添加代码，例如每次循环时询问用户“是否继续循环？&lt;y/n&gt;”，然后判断用户是否输入y。这个方法有些笨拙，而且还减慢了输入的速度。使用<code>scanf()</code>的返回值，轻松地避免了这些问题。</p>\n<p>现在，我们来看看该程序的结构。总结如下：</p>\n<ul><li><p>把sum初始化为0</p>\n</li>\n<li><p>提示用户输入数据</p>\n</li>\n<li><p>读取用户输入的数据</p>\n</li>\n<li><p>当输入的数据为整数时，</p>\n</li>\n<li><p>输入添加给sum，</p>\n</li>\n<li><p>提示用户进行输入，</p>\n</li>\n<li><p>然后读取下一个输入</p>\n</li>\n<li><p>输入完成后，打印sum的值</p>\n</li>\n</ul><p>顺带一提，这叫作<strong>伪代码</strong>（pseudocode），是一种用简单的句子表示程序思路的方法，它与计算机语言的形式相对应。伪代码有助于设计程序的逻辑。确定程序的逻辑无误之后，再把伪代码翻译成实际的编程代码。使用伪代码的好处之一是，可以把注意力集中在程序的组织和逻辑上，不用在设计程序时还要分心如何用编程语言来表达自己的想法。例如，可以用缩进来代表一块代码，不用考虑C的语法要用花括号把这部分代码括起来。</p>\n<p>总之，因为<code>while</code>循环是入口条件循环，程序在进入循环体之前必须获取输入的数据并检查<code>status</code>的值，所以在 <code>while</code> 前面要有一个 <code>scanf()</code>。要让循环继续执行，在循环内需要一个读取数据的语句，这样程序才能获取下一个<code>status</code>的值，所以在<code>while</code>循环末尾还要有一个<code>scanf()</code>，它为下一次迭代做好了准备。可以把下面的伪代码作为<code>while</code>循环的标准格式：</p>\n<ul><li>获得第1个用于测试的值</li>\n<li>当测试为真时</li>\n<li>处理值</li>\n<li>获取下一个值</li>\n</ul><h3 id=\"c风格读取循环\">C风格读取循环<a href=\"#c风格读取循环\" title=\"C风格读取循环\"></a></h3><p>根据伪代码的设计思路，程序清单6.1可以用Pascal、BASIC或FORTRAN来编写。但是C更为简洁，下面的代码：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,　&amp;num);</span><br><span class=\"line\"><span class=\"keyword\">while</span>(status　==　<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 循环行为 */</span></span><br><span class=\"line\">status　=　<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,　&amp;num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">可以用这些代码替换：</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num)==<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/*循环行为*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>第二种形式同时使用<code>scanf()</code>的两种不同的特性。首先，如果函数调用成功，<code>scanf()</code>会把一个值存入<code>num</code>。然后，利用<code>scanf()</code>的返回值（0或1，不是num的值）控制<code>while</code>循环。因为每次迭代都会判断循环的条件，所以每次迭代都要调用<code>scanf()</code>读取新的<code>num</code>值来做判断。换句话说，C的语法特性让你可以用下面的精简版本替换标准版本：</p>\n<ul><li>当获取值和判断值都成功</li>\n<li>处理该值</li>\n</ul><p>接下来，我们正式地学习<code>while</code>语句。</p>\n<h2 id=\"while语句\">while语句<a href=\"#while语句\" title=\"while语句\"></a></h2><p>while循环的通用形式如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(expression)</span><br><span class=\"line\">statement</span><br></pre></td></tr></table></figure><p><code>statement</code>部分可以是以分号结尾的<strong>简单语句</strong>，也可以是用花括号括起来的<strong>复合语句</strong>。</p>\n<p>到目前为止，程序示例中的<code>expression</code>部分都使用<strong>关系表达式</strong>。也就是说，<code>expression</code>是值之间的比较，可以使用任何表达式。如果<code>expression</code>为<strong>真</strong>（或者更一般地说，<strong>非零</strong>），执行 <code>statement</code>部分一次，然后再次判断<code>expression</code>。在<code>expression</code>为假（0）之前，循环的判断和执行一直重复进行。每次循环都被称为一次迭代（iteration），如图6.1所示。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/while循环的结构.png\" class=\"φcy\"></p>\n<h3 id=\"终止while循环\">终止while循环<a href=\"#终止while循环\" title=\"终止while循环\"></a></h3><p>while循环有一点非常重要：在构建while循环时，必须让测试表达式的值有变化，表达式最终要为假。否则，循环就不会终止（实际上，可以使用break和if语句来终止循环，但是你尚未学到）。考虑下面的例子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(index&lt;<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Good　morning!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>上面的程序段将打印无数次<code>Good　morning!</code>。为什么？因为循环中<code>index</code>的值一直都是原来的值1，不曾变过。</p>\n<p>现在，考虑下面的程序段：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(--index&lt;<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Good　morning!\\n\"</span>);</span><br></pre></td></tr></table></figure><p>这段程序也好不到哪里去。虽然改变了<code>index</code>的值，但是改错了！不过，这个版本至少在<code>index</code>减少到其类型到可容纳的最小负值并变成最大正值时会终止循环（第3章3.4.2节中的toobig.c程序解释过，最大正值加1一般会得到一个负值；类似地，最小负值减1一般会得到最大正值）。</p>\n<h3 id=\"何时终止循环\">何时终止循环<a href=\"#何时终止循环\" title=\"何时终止循环\"></a></h3><p>要明确一点：只有在对测试条件求值时，才决定是终止还是继续循环。例如，考虑程序清单6.2中的程序。</p>\n<p>程序清单6.2 when.c程序</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// when.c -- 何时退出循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n&lt;<span class=\"number\">7</span>)　　　　　　　　　　　<span class=\"comment\">// 第7行</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"n=%d\\n\"</span>,n);</span><br><span class=\"line\">        n++;　　　　　　　　　　　　　 <span class=\"comment\">// 第10行</span></span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Now n=%d\\n\"</span>, n); <span class=\"comment\">// 第11行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"The　loop　has　finished.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行程序清单6.2，输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\">Now n = <span class=\"number\">6</span></span><br><span class=\"line\">n = <span class=\"number\">6</span></span><br><span class=\"line\">Now n = <span class=\"number\">7</span></span><br><span class=\"line\">The loop has finished.</span><br></pre></td></tr></table></figure><p>在第2次循环时，变量n在第10行首次获得值7。但是，此时程序并未退出，它结束本次循环（第11行），并在对第7行的测试条件求值时才退出循环（变量n在第1次判断时为5，第2次判断时为6）。</p>\n<h3 id=\"while：入口条件循环\">while：入口条件循环<a href=\"#while：入口条件循环\" title=\"while：入口条件循环\"></a></h3><p><code>while</code>循环是使用入口条件的有条件循环。所谓“有条件”指的是语句部分的执行取决于测试表达式描述的条件，如(<code>index &lt; 5</code>)。该表达式是一个入口条件（entry condition），因为必须满足条件才能进入循环体。在下面的情况中，就不会进入循环体，因为条件一开始就为假：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(index++&lt;<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"Have　a　fair　day　or　better.\\n\"</span>);</span><br></pre></td></tr></table></figure><p>把第1行改为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">index = <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure><p>就可以运行这个循环了。</p>\n<h3 id=\"语法要点\">语法要点<a href=\"#语法要点\" title=\"语法要点\"></a></h3><p>使用<code>while</code>时，要牢记一点：只有在测试条件后面的单独语句（简单语句或复合语句）才是循环部分。程序清单6.3演示了忽略这点的后果。缩进是为了让读者阅读方便，不是计算机的要求。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.3</span> while1.c程序</span><br><span class=\"line\"><span class=\"comment\">/* while1.c -- 注意花括号的使用 */</span></span><br><span class=\"line\"><span class=\"comment\">/* 糟糕的代码创建了一个无限循环 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&lt;<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"n　is　%d\\n\"</span>,　n);</span><br><span class=\"line\">    n++;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's　all　this　program　does\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">n　is　<span class=\"number\">0</span></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure><p>屏幕上会一直输出以上内容，除非强行关闭这个程序。</p>\n<p>虽然程序中缩进了<code>n++;</code>这条语句，但是并未把它和上一条语句括在花括号内。因此，只有直接跟在测试条件后面的一条语句是循环的一部分。变量n的值不会改变，条件<code>n&lt;3</code>一直为真。该循环会一直打印<code>n is 0</code>，除非强行关闭程序。这是一个无限循环（infinite loop）的例子，没有外部干涉就不会退出。</p>\n<p>记住，即使<code>while</code>语句本身使用复合语句，在语句构成上，它也是一条单独的语句。该语句从<code>while</code>开始执行，到第1个分号结束。在使用了复合语句的情况下，到右花括号结束。</p>\n<p>要注意放置分号的位置。例如，考虑程序清单6.4。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.4</span> while2.c程序</span><br><span class=\"line\"><span class=\"comment\">/* while2.c -- 注意分号的位置 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n++&lt;<span class=\"number\">3</span>);　　　　　 <span class=\"comment\">/* 第7行 */</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"n is %d\\n\"</span>, n); <span class=\"comment\">/* 第8行 */</span></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"That's　all　this　program　does.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n is <span class=\"number\">4</span></span><br><span class=\"line\">That<span class=\"number\">'</span>s all <span class=\"keyword\">this</span> program does.</span><br></pre></td></tr></table></figure><p>如前所述，循环在执行完测试条件后面的第 1 条语句（简单语句或复合语句）后进入下一轮迭代，直到测试条件为假才会结束。该程序中第7行的测试条件后面直接跟着一个分号，循环在此进入下一轮迭代，因为单独一个分号被视为一条语句。虽然n的值在每次循环时都递增1，但是第8行的语句不是循环的一部分，<strong>因此只会打印一次循环结束后的n值</strong>。</p>\n<p>在该例中，测试条件后面的单独分号是<strong>空语句</strong>（null statement），它什么也不做。在C语言中，单独的分号表示空语句。有时，程序员会故意使用带空语句的<code>while</code>语句，因为所有的任务都在测试条件中完成了，不需要在循环体中做什么。例如，假设你想跳过输入到第1个非空白字符或数字，可以这样写：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,&amp;num)==<span class=\"number\">1</span>)</span><br><span class=\"line\">; <span class=\"comment\">/* 跳过整数输入 */</span></span><br></pre></td></tr></table></figure><p>只要<code>scanf()</code>读取一个整数，就会返回<code>1</code>，循环继续执行。注意，为了提高代码的可读性，应该让这个分号独占一行，不要直接把它放在测试表达式同行。这样做一方面让读者更容易看到空语句，一方面也提醒自己和读者空语句是有意而为之。处理这种情况更好的方法是使用下一章介绍的<code>continue</code>语句。</p>\n<h2 id=\"用关系运算符和表达式比较大小\">用关系运算符和表达式比较大小<a href=\"#用关系运算符和表达式比较大小\" title=\"用关系运算符和表达式比较大小\"></a></h2><p><code>while</code>循环经常依赖测试表达式作比较，这样的表达式被称为<strong>关系表达式</strong>（relational expression），出现在关系表达式中间的运算符叫做<strong>关系运算符</strong>（relational operator）。前面的示例中已经用过一些关系运算符，表 6.1 列出了 C 语言的所有关系运算符。该表也涵盖了所有的数值关系（数字之间的关系再复杂也没有人与人之间的关系复杂）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/关系运算符.png\" class=\"φcy\"></p>\n<p>关系运算符常用于构造while语句和其他C语句（稍后讨论）中用到的关系表达式。这些语句都会检查关系表达式为真还是为假。下面有3个互不相关的while语句，其中都包含关系表达式。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(number&lt;<span class=\"number\">6</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Your　number　is　too　small.\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%d\"</span>,　&amp;number);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(ch!=<span class=\"string\">'$'</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    count++;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%c\"</span>,　&amp;ch);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%f\"</span>,&amp;num)==<span class=\"number\">1</span>)</span><br><span class=\"line\">sum=sum+num;</span><br></pre></td></tr></table></figure><p>注意，第2个<code>while</code>语句的关系表达式还可用于比较字符。比较时使用的是机器字符码（假定为ASCII）。但是，不能用关系运算符比较字符串。第11章将介绍如何比较字符串。</p>\n<p>虽然关系运算符也可用来比较浮点数，但是要注意：比较浮点数时，尽量只使用&lt;和&gt;。因为浮点数的舍入误差会导致在逻辑上应该相等的两数却不相等。例如，3乘以1/3的积是1.0。如果用把1/3表示成小数点后面6位数字，乘积则是.999999，不等于1。使用<code>fabs()</code>函数（声明在<code>math.h</code>头文件中）可以方便地比较浮点数，该函数返回一个浮点值的绝对值（即，没有代数符号的值）。</p>\n<p>例如，可以用类似程序清单6.5的方法来判断一个数是否接近预期结果。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.5</span> cmpflt.c程序</span><br><span class=\"line\"><span class=\"comment\">// cmpflt.c -- 浮点数比较</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;math.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span>　<span class=\"keyword\">double</span>　ANSWER　=　<span class=\"number\">3.14159</span>;</span><br><span class=\"line\">    <span class=\"keyword\">double</span>　response;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"What　is　the　value　of　pi?\\n\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;response);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(<span class=\"built_in\">fabs</span>(response-ANSWER)&gt;<span class=\"number\">0.0001</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Try　again!\\n\"</span>);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">\"%lf\"</span>,&amp;response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Close　enough!\\n\"</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>循环会一直提示用户继续输入，除非用户输入的值与正确值之间相差0.0001：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">What　is　the　value　of　pi?</span><br><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\">Try　again!</span><br><span class=\"line\"><span class=\"number\">3.1416</span></span><br><span class=\"line\">Close enough!</span><br></pre></td></tr></table></figure><h3 id=\"什么是真\">什么是真<a href=\"#什么是真\" title=\"什么是真\"></a></h3><p>这是一个古老的问题，但是对C而言还不算难。在C中，表达式一定有一个值，关系表达式也不例外。程序清单6.6中的程序用于打印两个关系表达式的值，一个为真，一个为假。</p>\n<p>程序清单6.6 t_and_f.c程序</p>\n<p>/* t_and_f.c – C中的真和假的值 */</p>\n<p>#include　&lt;stdio.h&gt;</p>\n<p>int　main(void)</p>\n<p>{</p>\n<p>int　true_val,　false_val;</p>\n<p>true_val = (10 &gt; 2);　　　　// 关系为真的值</p>\n<p>false_val = (10 == 2); // 关系为假的值</p>\n<p>printf(“true　=　%d;　false　=　%d　\\n”,　true_val,　false_val);</p>\n<p>return　0;</p>\n<p>}</p>\n<p>程序清单6.6把两个关系表达式的值分别赋给两个变量，即把表达式为真的值赋给true_val，表达式为假的值赋给false_val。运行该程序后输出如下：</p>\n<p>true = 1; false = 0</p>\n<p>原来如此！对C而言，表达式为真的值是1，表达式为假的值是0。一些C程序使用下面的循环结构，由于1为真，所以循环会一直进行。</p>\n<p>while　(1)</p>\n<p>{</p>\n<p>…</p>\n<p>}</p>\n<h3 id=\"其他真值\">其他真值<a href=\"#其他真值\" title=\"其他真值\"></a></h3><p>既然1或0可以作为<code>while</code>语句的测试表达式，是否还可以使用其他数字？如果可以，会发生什么？我们用程序清单6.7来做个实验。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.7</span> truth.c程序</span><br><span class=\"line\"><span class=\"comment\">// truth.c -- 哪些值为真</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n=<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　true\\n\"</span>,　n--);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　false\\n\"</span>,　n);</span><br><span class=\"line\">    n=<span class=\"number\">-3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　true\\n\"</span>,　n++);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%2d　is　false\\n\"</span>,　n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>该程序的输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">3</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">2</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">1</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">0</span>　is　<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">-3</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">-2</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">-1</span>　is　<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">0</span>　is　<span class=\"literal\">false</span></span><br></pre></td></tr></table></figure><p>执行第1个循环时，n分别是3、2、1，当n等于0时，第1个循环结束。与此类似，执行第2个循环时，n分别是-3、-2和-1，当n等于0时，第2个循环结束。一般而言，所有的非零值都视为真，只有0被视为假。在C中，真的概念还真宽！</p>\n<p>也可以说，<strong>只要测试条件的值为非零，就会执行 <code>while</code> 循环</strong>。这是从数值方面而不是从真/假方面来看测试条件。要牢记：<strong>关系表达式为真，求值得1；关系表达式为假，求值得0</strong>。因此，这些表达式实际上相当于数值。</p>\n<p>许多C程序员都会很好地利用测试条件的这一特性。例如，用<code>while (goats)</code>替换<code>while (goats !=0)</code>，因为表达式<code>goats != 0</code>和<code>goats</code>都只有在<code>goats</code>的值为0时才为0或假。第1种形式（<code>while (goats != 0)</code>）对初学者而言可能比较清楚，但是第2种形式（<code>while (goats)</code>）才是C程序员最常用的。要想成为一名C程序员，应该多熟悉<code>while (goats)</code>这种形式。</p>\n<h3 id=\"真值的问题\">真值的问题<a href=\"#真值的问题\" title=\"真值的问题\"></a></h3><p>C对真的概念约束太少会带来一些麻烦。例如，我们稍微修改一下程序清单6.1，修改后的程序如程序清单6.8所示。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.8</span> trouble.c程序</span><br><span class=\"line\"><span class=\"comment\">// trouble.c -- 误用=会导致无限循环</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum=<span class=\"number\">0L</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> status;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　an　integer　to　be　summed　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"(q　to　quit):　\"</span>);</span><br><span class=\"line\">    status=<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(status=<span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum=sum+num;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　next　integer　(q　to　quit):　\"</span>);</span><br><span class=\"line\">        status　=　<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,　&amp;num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Those　integers　sum　to　%ld.\\n\"</span>,　sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>运行该程序，其输出如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Please　enter　an　integer　to　be　<span class=\"title\">summed</span>　<span class=\"params\">(q　to　quit)</span>:　20</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　5</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　30</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:　q</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br><span class=\"line\"><span class=\"function\">Please　enter　next　<span class=\"title\">integer</span>　<span class=\"params\">(q　to　quit)</span>:</span></span><br></pre></td></tr></table></figure><p>（„„屏幕上会一直显示最后的提示内容，除非强行关闭程序。也许你根本不想运行这个示例。）</p>\n<p>这个麻烦的程序示例改动了<code>while</code>循环的测试条件，把<code>status == 1</code>替换成<code>status = 1</code>。后者是一个赋值表达式语句，所以 status 的值为 1。而且，整个赋值表达式的值就是赋值运算符左侧的值，所以<code>status = 1</code>的值也是1。这里，<code>while (status = 1)</code>实际上相当于<code>while (1)</code>，也就是说，循环不会退出。虽然用户输入q，status被设置为0，但是循环的测试条件把status又重置为1，进入了下一次迭代。</p>\n<p>读者可能不太理解，程序的循环一直运行着，用户在输入q后完全没机会继续输入。如果<code>scanf()</code>读取指定形式的输入失败，就把无法读取的输入留在输入队列中，供下次读取。当<code>scanf()</code>把q作为整数读取时失败了，它把 q 留下。在下次循环时，<code>scanf()</code>从上次读取失败的地方（q）开始读取，<code>scanf()</code>把q作为整数读取，又失败了。因此，这样修改后不仅创建了一个无限循环，还创建了一个无限失败的循环，真让人沮丧。好在计算机觉察不出来。对计算机而言，无限地执行这些愚蠢的指令比成功预测未来10年的股市行情没什么两样。</p>\n<p>不要在本应使用<code>==</code>的地方使用<code>=</code>。一些计算机语言（如，<code>BASIC</code>）用相同的符号表示赋值运算符和关系相等运算符，但是这两个运算符完全不同（见图 6.2）。赋值运算符把一个值赋给它左侧的变量；而关系相等运算符检查它左侧和右侧的值是否相等，不会改变左侧变量的值（如果左侧是一个变量）。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/关系运算符==和赋值运算符=.png\" class=\"φcy\"></p>\n<p>示例如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canoes=<span class=\"number\">5</span>\t\t←把<span class=\"number\">5</span>赋给canoes</span><br><span class=\"line\">canoes==<span class=\"number\">5</span>\t\t←检查canoes的值是否为<span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>要注意使用正确的运算符。编译器不会检查出你使用了错误的形式，得出也不是预期的结果（误用=的人实在太多了，以至于现在大多数编译器都会给出警告，提醒用户是否要这样做）。如果待比较的一个值是常量，可以把该常量放在左侧有助于编译器捕获错误：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span>=canoes\t←语法错误</span><br><span class=\"line\"><span class=\"number\">5</span>==canoes\t←检查canoes的值是否为<span class=\"number\">5</span></span><br></pre></td></tr></table></figure><p>可以这样做是因为C语言不允许给常量赋值，编译器会把赋值运算符的这种用法作为语法错误标记出来。许多经验丰富的程序员在构建比较是否相等的表达式时，都习惯把常量放在左侧。</p>\n<p>总之，关系运算符用于构成关系表达式。关系表达式为真时值为1，为假时值为0。通常用关系表达式作为测试条件的语句（如<code>while</code>和<code>if</code>）可以使用任何表达式作为测试条件，非零为真，零为假。</p>\n<h3 id=\"新的_bool类型\">新的_Bool类型<a href=\"#新的_bool类型\" title=\"新的_Bool类型\"></a></h3><p>在C语言中，一直用<code>int</code>类型的变量表示真/假值。C99专门针对这种类型的变量新增了<code>_Bool</code>类型。该类型是以英国数学家George Boole的名字命名的，他开发了用代数表示逻辑和解决逻辑问题。在编程中，表示真或假的变量被称为布尔变量（Boolean variable），所以_Bool是C语言中布尔变量的类型名。_<code>Bool</code>类型的变量<strong>只能储存1（真）或0（假）</strong>。如果把其他非零数值赋给_Bool类型的变量，该变量会被设置为1。这反映了C把所有的<strong>非零值都视为真</strong>。</p>\n<p>程序清单6.9修改了程序清单6.8中的测试条件，把<code>int</code>类型的变量<code>status</code>替换为<code>_Bool</code>类型的变量<code>input_is_good</code>。给布尔变量取一个能表示真或假值的变量名是一种常见的做法。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序清单<span class=\"number\">6.9</span> <span class=\"keyword\">boolean</span>.c程序</span><br><span class=\"line\"><span class=\"comment\">// boolean.c -- 使用_Bool类型的变量 variable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span>　<span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>　<span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> num;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> sum=<span class=\"number\">0L</span>;</span><br><span class=\"line\">    <span class=\"built_in\">_Bool</span> input_is_good;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　an　integer　to　be　summed　\"</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"(q　to　quit):　\"</span>);</span><br><span class=\"line\">    input_is_good=(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num)==<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(input_is_good)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum=sum+num;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"Please　enter　next　integer　(q　to　quit):　\"</span>);</span><br><span class=\"line\">        input_is_good=(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>,&amp;num)==<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"Those　integers　sum　to　%ld.\\n\"</span>,　sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>　<span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>注意程序中把比较的结果赋值给_Bool类型的变量<code>input_is_good</code>：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input_is_good=(<span class=\"built_in\">scanf</span>(<span class=\"string\">\"%ld\"</span>, &amp;num) == <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure><p>这样做没问题，因为<code>==</code>运算符返回的值不是1就是0。顺带一提，从优先级方面考虑的话，并不需要用圆括号把<code>scanf(&quot;%ld&quot;,&amp;num)==1</code>括起来。但是，这样做可以提高代码可读性。还要注意，如何为变量命名才能让<code>while</code>循环的测试简单易懂：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (input_is_good)</span><br></pre></td></tr></table></figure><p>C99提供了<code>stdbool.h</code>头文件，该头文件让<code>bool</code>成为<code>_Bool</code>的别名，而且还把<code>true</code>和<code>false</code>分别定义为1和0的符号常量。包含该头文件后，写出的代码可以与<code>C++</code>兼容，因为<code>C++</code>把<code>bool</code>、<code>true</code>和<code>false</code>定义为关键字。</p>\n<p>如果系统不支持<code>_Bool</code>类型，导致无法运行该程序，可以把<code>_Bool</code>替换成<code>int</code>即可。</p>\n<h3 id=\"优先级和关系运算符\">优先级和关系运算符<a href=\"#优先级和关系运算符\" title=\"优先级和关系运算符\"></a></h3><p><strong><mark>关系运算符的优先级比算术运算符低</mark></strong>（包括<code>+</code>和<code>-</code>），比赋值运算符高。这意味着<code>x &gt; y + 2</code>和<code>x &gt; (y+ 2)</code>相同，<code>x = y &gt; 2</code>和<code>x = (y &gt; 2)</code>相同。换言之，如果y大于2，则给x赋值1，否则赋值0。y的值不会赋给x。</p>\n<p><strong><mark>关系运算符比赋值运算符的优先级高</mark></strong>，因此，<code>x_bigger=x&gt;y;</code>相当于<code>x_bigger=(x &gt; y);</code>。</p>\n<p>关系运算符之间有两种不同的优先级。</p>\n<p>高优先级组： <code>&lt;&lt;= &gt;&gt;=</code></p>\n<p>低优先级组： <code>== !=</code></p>\n<p>与其他大多数运算符一样，<strong><mark>关系运算符的结合律也是从左往右</mark></strong>。因此：</p>\n<p><code>ex!=wye==zee</code>与<code>(ex != wye) == zee</code>相同</p>\n<p>首先，C判断<code>ex</code>与<code>wye</code>是否相等；然后，用得出的值1或0（真或假）再与<code>zee</code>比较。我们并不推荐这样写，但是在这里有必要说明一下。</p>\n<p>表6.2列出了目前我们学过的运算符的性质。附录B的参考资料II“C运算符”中列出了全部运算符的完整优先级表。</p>\n<p><img src=\"https://gitee.com/DxSummer/pic/raw/master/img/c/运算符优先级.png\" class=\"φcy\"></p>\n<p>小结：<code>while</code>语句</p>\n<p>关键字：<code>while</code></p>\n<p>一般注解：</p>\n<p><code>while</code>语句创建了一个循环，重复执行直到测试表达式为假或0。<code>while</code>语句是一种入口条件循环，也就是说，在执行多次循环之前已决定是否执行循环。因此，循环有可能不被执行。循环体可以是简单语句，也可以是复合语句。</p>\n<p>形式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(expression)</span><br><span class=\"line\">statement</span><br></pre></td></tr></table></figure><p>在<code>expression</code>部分为假或0之前，重复执行<code>statement</code>部分。</p>\n<p>示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(n++&lt;<span class=\"number\">100</span>)</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\" %d %d\\n\"</span>,n,<span class=\"number\">2</span>*n+<span class=\"number\">1</span>); <span class=\"comment\">// 简单语句</span></span><br><span class=\"line\"><span class=\"keyword\">while</span>(fargo&lt;<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#123; <span class=\"comment\">// 复合语句</span></span><br><span class=\"line\">    fargo=fargo+<span class=\"built_in\">step</span>;</span><br><span class=\"line\">    <span class=\"built_in\">step</span>=<span class=\"number\">2</span>*<span class=\"built_in\">step</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><p>小结：关系运算符和表达式</p>\n<p>关系运算符：</p>\n<p>每个关系运算符都把它左侧的值和右侧的值进行比较。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;　　　　　小于</span><br><span class=\"line\">&lt;=　　　　 小于或等于</span><br><span class=\"line\">==　　　　 等于</span><br><span class=\"line\">&gt;=　　　　 大于或等于</span><br><span class=\"line\">&gt;　　　　　大于</span><br><span class=\"line\">!=　　　　 不等于</span><br></pre></td></tr></table></figure><p><strong>关系表达式：</strong></p>\n<p>简单的关系表达式由关系运算符及其运算对象组成。如果关系为真，关系表达式的值为 1；如果关系为假，关系表达式的值为0。</p>\n<p>示例：</p>\n<p><code>5 &gt; 2</code>为真，关系表达式的值为1</p>\n<p><code>(2 + a) == a</code> 为假，关系表达式的值为0</p>\n<h2 id=\"不确定循环和计数循环\">不确定循环和计数循环<a href=\"#不确定循环和计数循环\" title=\"不确定循环和计数循环\"></a></h2><p>一些while循环是不确定循环（indefinite loop）。所谓不确定循环，指在测试表达式为假之前，预先不知道要执行多少次循环。例如，程序清单6.1通过与用户交互获得数据来计算整数之和。我们事先并不知道用户会输入什么整数。另外，还有一类是计数循环（counting loop）。这类循环在执行循环之前就知道要重复执行多少次。程序清单6.10就是一个简单的计数循环。</p>\n<p>程序清单6.10 sweetie1.c程序</p>\n<p>// sweetie1.c – 一个计数循环</p>\n<p>#include　&lt;stdio.h&gt;</p>\n<p>int　main(void)</p>\n<p>{</p>\n<p>const　int　NUMBER　=　22;</p>\n<p>int count = 1;　　　　　　　　　　　　　// 初始化</p>\n","prev":{"title":"疫情期间基层党员如何发挥先锋模范作用","link":"posts/91d5787c"},"next":{"title":"运算符、表达式和语句","link":"posts/d0061c8b"},"plink":"https://dxsummer.gitee.io/posts/287f677b/","toc":[{"id":"c控制语句：循环","title":"C控制语句：循环","index":"1"},{"id":"再探while循环","title":"再探while循环","index":"2","children":[{"id":"程序注释","title":"程序注释","index":"2.1"},{"id":"c风格读取循环","title":"C风格读取循环","index":"2.2"}]},{"id":"while语句","title":"while语句","index":"3","children":[{"id":"终止while循环","title":"终止while循环","index":"3.1"},{"id":"何时终止循环","title":"何时终止循环","index":"3.2"},{"id":"while：入口条件循环","title":"while：入口条件循环","index":"3.3"},{"id":"语法要点","title":"语法要点","index":"3.4"}]},{"id":"用关系运算符和表达式比较大小","title":"用关系运算符和表达式比较大小","index":"4","children":[{"id":"什么是真","title":"什么是真","index":"4.1"},{"id":"其他真值","title":"其他真值","index":"4.2"},{"id":"真值的问题","title":"真值的问题","index":"4.3"},{"id":"新的_bool类型","title":"新的_Bool类型","index":"4.4"},{"id":"优先级和关系运算符","title":"优先级和关系运算符","index":"4.5"}]},{"id":"不确定循环和计数循环","title":"不确定循环和计数循环","index":"5"}],"reward":true,"copyright":{"author":"DxSummer","link":"<a href=\"https://dxsummer.gitee.io/posts/287f677b/\" title=\"C控制语句：循环\">https://dxsummer.gitee.io/posts/287f677b/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\\\"https://creativecommons.org/licenses/by-nc-sa/4.0/\\\" rel=\\\"external nofollow\\\" target=\\\"_blank\\\">CC BY-NC-ND 4.0</a>)","published":"2020年6月3日","updated":"2020年6月3日"}}